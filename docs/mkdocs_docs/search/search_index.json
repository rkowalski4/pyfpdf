{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"index.html","text":"FPDF for Python PyFPDF is a library for PDF document generation under Python, ported from PHP (see FPDF : \"Free\"-PDF, a well-known PDFlib-extension replacement with many examples, scripts and derivatives). Latest Released Version: fpdf2==2.0.0 (May 4th, 2017)* * - Current Development Version: 2.0.1** Main features Easy to use (and easy to extend) Small and compact code, useful for testing new features and teaching Many simple examples and scripts available in many languages PIL Integration for images (via Pillow) No installation, no compilation or other libraries (DLLs) required This repository is a fork of the library's original port by Max Pat , with the following enhancements: Python 2.7 to 3.5+ support Unicode (UTF-8) TrueType font subset embedding (Central European, Cyrillic, Greek, Baltic, Thai, Chinese, Japanese, Korean, Hindi and almost any other language in the world) * New! * based on sFPDF LGPL3 PHP version from Ian Back Improved installers (Python wheel) support Barcode I2of5 and code39, QR code coming soon ... PNG, GIF and JPG support (including transparency and alpha channel) New! Exceptions support, other minor fixes, improvements and PEP8 code cleanups Port of the Tutorial and ReferenceManual (Spanish translation available) FPDF original features: Choice of measurement unit, page format and margins Page header and footer management Automatic page break Automatic line break and text justification Image, colors and links support Page compression Extensive Tutorial and complete online documentation Installation Using PyPI Become super user if necessary: sudo su pip install fpdf2 From source: Clone the repository: git clone --depth 1 --branch master https://github.com/alexanderankin/pyfpdf.git Optional: Check out the version you want, git tag -n This will require Pillow and other dependencies to be satisfied, or it will download the sources of those and compile those. On ubuntu this requires the following header packages: sudo apt-get install libjpeg-dev libpython-dev zlib1g-dev # libpython3.3-dev #(if necessary) Run python setup.py install Support For community support, please feel free to file an issue . Please be sure to tag recently active maintainers from other issues, as the repository of this library as of this writing is a fork and does not accept issues (only pull requests).","title":"Project Home"},{"location":"index.html#fpdf-for-python","text":"PyFPDF is a library for PDF document generation under Python, ported from PHP (see FPDF : \"Free\"-PDF, a well-known PDFlib-extension replacement with many examples, scripts and derivatives). Latest Released Version: fpdf2==2.0.0 (May 4th, 2017)* * - Current Development Version: 2.0.1**","title":"FPDF for Python"},{"location":"index.html#main-features","text":"Easy to use (and easy to extend) Small and compact code, useful for testing new features and teaching Many simple examples and scripts available in many languages PIL Integration for images (via Pillow) No installation, no compilation or other libraries (DLLs) required This repository is a fork of the library's original port by Max Pat , with the following enhancements: Python 2.7 to 3.5+ support Unicode (UTF-8) TrueType font subset embedding (Central European, Cyrillic, Greek, Baltic, Thai, Chinese, Japanese, Korean, Hindi and almost any other language in the world) * New! * based on sFPDF LGPL3 PHP version from Ian Back Improved installers (Python wheel) support Barcode I2of5 and code39, QR code coming soon ... PNG, GIF and JPG support (including transparency and alpha channel) New! Exceptions support, other minor fixes, improvements and PEP8 code cleanups Port of the Tutorial and ReferenceManual (Spanish translation available) FPDF original features: Choice of measurement unit, page format and margins Page header and footer management Automatic page break Automatic line break and text justification Image, colors and links support Page compression Extensive Tutorial and complete online documentation","title":"Main features"},{"location":"index.html#installation","text":"Using PyPI Become super user if necessary: sudo su pip install fpdf2 From source: Clone the repository: git clone --depth 1 --branch master https://github.com/alexanderankin/pyfpdf.git Optional: Check out the version you want, git tag -n This will require Pillow and other dependencies to be satisfied, or it will download the sources of those and compile those. On ubuntu this requires the following header packages: sudo apt-get install libjpeg-dev libpython-dev zlib1g-dev # libpython3.3-dev #(if necessary) Run python setup.py install","title":"Installation"},{"location":"index.html#support","text":"For community support, please feel free to file an issue . Please be sure to tag recently active maintainers from other issues, as the repository of this library as of this writing is a fork and does not accept issues (only pull requests).","title":"Support"},{"location":"Development.html","text":"Development Development Introduction Repository structure Testing Documentation See also Introduction This page has summary information about developing the PyPDF library. This project, fpdf2 is a [FORK] of the PyFPDF project, which can be found here . It is made in order to keep the library updated and fulfill the goals of its Roadmap and a general overhaul of the codebase because there was technical debt keeping features from being created and bugs from being eradicated. More on pyfpdf: This project started as Python fork of the FPDF PHP library. Later, code for native reading TTF fonts was added. FPDF has not been updated since 2011. See also the TCPDF library. Until 2015 the code was developed at Google Code . Now the main repository is at Github . You can also view the old repository , old issues , and old wiki . After being committed to the master branch, code documentation is automatically uploaded to the Read the Docs site. Repository structure [attic] - folder with old code and useful, but unsupported things [docs] - viewable documenation folder [mkdocs_docs] - viewable documenation source folder [fpdf] - library source [scripts] - manipulate this repository [test] - tests [tutorial] - tutorials (see also Tutorial ) README.md , PyPIReadme.rst - Github and PyPI Readme's. LICENSE - license information setup.cfg , setup.py , MANIFEST.in - setup configuration mkdocs.yml - config for MkDocs tox.ini - config for Tox Testing Testing is done with Tox , and is self-documented in the tox.ini file in the repository. To run tests, cd into the cloned repository and run tox . If you do not want to run tests for all versions of python, run tox -e py27 (or your version of python). To install all versions of python that are supported on Ubuntu, see the instructions on the Github Repository home page of this project. Be sure to see the example tests in the test folder & test\\utilities.py and explore that folder in general. Documentation To build docs, cd into repository and tox -e docs . This Standalone documentation is in the mkdocs_docs subfolder in Markdown format. Building instructions are contained in the configuration file mkdocs.yml and also in the docs script in the tox.ini file. Additional documentation is generated from inline comments, and is available in the project home page . See also Project Home , Frequently asked questions , Unicode .","title":"Development"},{"location":"Development.html#development","text":"Development Introduction Repository structure Testing Documentation See also","title":"Development"},{"location":"Development.html#introduction","text":"This page has summary information about developing the PyPDF library. This project, fpdf2 is a [FORK] of the PyFPDF project, which can be found here . It is made in order to keep the library updated and fulfill the goals of its Roadmap and a general overhaul of the codebase because there was technical debt keeping features from being created and bugs from being eradicated. More on pyfpdf: This project started as Python fork of the FPDF PHP library. Later, code for native reading TTF fonts was added. FPDF has not been updated since 2011. See also the TCPDF library. Until 2015 the code was developed at Google Code . Now the main repository is at Github . You can also view the old repository , old issues , and old wiki . After being committed to the master branch, code documentation is automatically uploaded to the Read the Docs site.","title":"Introduction"},{"location":"Development.html#repository-structure","text":"[attic] - folder with old code and useful, but unsupported things [docs] - viewable documenation folder [mkdocs_docs] - viewable documenation source folder [fpdf] - library source [scripts] - manipulate this repository [test] - tests [tutorial] - tutorials (see also Tutorial ) README.md , PyPIReadme.rst - Github and PyPI Readme's. LICENSE - license information setup.cfg , setup.py , MANIFEST.in - setup configuration mkdocs.yml - config for MkDocs tox.ini - config for Tox","title":"Repository structure"},{"location":"Development.html#testing","text":"Testing is done with Tox , and is self-documented in the tox.ini file in the repository. To run tests, cd into the cloned repository and run tox . If you do not want to run tests for all versions of python, run tox -e py27 (or your version of python). To install all versions of python that are supported on Ubuntu, see the instructions on the Github Repository home page of this project. Be sure to see the example tests in the test folder & test\\utilities.py and explore that folder in general.","title":"Testing"},{"location":"Development.html#documentation","text":"To build docs, cd into repository and tox -e docs . This Standalone documentation is in the mkdocs_docs subfolder in Markdown format. Building instructions are contained in the configuration file mkdocs.yml and also in the docs script in the tox.ini file. Additional documentation is generated from inline comments, and is available in the project home page .","title":"Documentation"},{"location":"Development.html#see-also","text":"Project Home , Frequently asked questions , Unicode .","title":"See also"},{"location":"FAQ.html","text":"FAQ See Project Home for an overall introduction. FAQ What is FPDF? What is this library not? How does this library compare to ...? What does the code look like? Does this library have any framework integration? What is the development status of this library? What is the license of this library (pyfpdf)? What is FPDF? FPDF (and PyFPDF) is a library with low-level primitives to easily generate PDF documents. This is similar to ReportLab's graphics canvas, but with some methods to output \"fluid\" cells (\"flowables\" that can span multiple rows, pages, tables, columns, etc). It has two methods (\"hooks\") that can be implemented in a subclass, headers and footers. Originally developed in PHP several years ago (as a free alternative to proprietary C libraries), it has been ported to many programming languages, including ASP, C++, Java, Pl/SQL, Ruby, Visual Basic, and of course, Python. For more information see: http://www.fpdf.org/en/links.php What is this library not ? This library is not a: charts or widgets library (but you can import PNG or JPG images, use PIL or any other library, or draw the figures yourself; see examples) \"flexible page layout engine\" like Reportlab PLATYPUS (but it can do columns, chapters, etc.; see the Tutorial ) XML or object definition language like Geraldo Reports , Jasper Reports, or similar (but look at write_html for simple HTML reports and Templates for fill-in-the-blank documents) PDF text extractor, converter, splitter or similar. Look at pyPdf . How does this library compare to ...? The API is geared toward giving the user access to features of the Portable Document Format as they are described in the Adobe PDF Reference Manual, this bypasses needless complexities for simpler use cases. It is small: Source folder < 200Kb. It includes cell and multi_cell primitives to draw fluid document like invoices, listings and reports, and includes basic support for HTML rendering. Compared to other solutions, this library should be easier to use and adapt for most common documents (no need to use a page layout engine, style sheets, templates, or stories...), with full control over the generated PDF document (including advanced features and extensions). What does the code look like? Following is an example similar to the Reportlab one in the book of web2py. Note the simplified import and usage: ( http://www.web2py.com/book/default/chapter/09?search=pdf#ReportLab-and-PDF ) PyFPDF: from fpdf import FPDF def get_me_a_pyfpdf(): title = \"This The Doc Title\" heading = \"First Paragraph\" text = 'bla ' * 10000 pdf = FPDF() pdf.add_page() pdf.set_font('Times', 'B', 15) pdf.cell(w=210, h=9, txt=title, border=0, ln=1, align='C', fill=0) pdf.set_font('Times', 'B', 15) pdf.cell(w=0, h=6, txt=heading, border=0, ln=1, align='L', fill=0) pdf.set_font('Times', '', 12) pdf.multi_cell(w=0, h=5, txt=text) response.headers['Content-Type'] = 'application/pdf' return pdf.output(dest='S') Reportlab: from reportlab.platypus import * from reportlab.lib.styles import getSampleStyleSheet from reportlab.rl_config import defaultPageSize from reportlab.lib.units import inch, mm from reportlab.lib.enums import TA_LEFT, TA_RIGHT, TA_CENTER, TA_JUSTIFY from reportlab.lib import colors from uuid import uuid4 from cgi import escape import os def get_me_a_pdf(): title = \"This The Doc Title\" heading = \"First Paragraph\" text = 'bla ' * 10000 styles = getSampleStyleSheet() tmpfilename = os.path.join(request.folder, 'private', str(uuid4())) doc = SimpleDocTemplate(tmpfilename) story = [] story.append(Paragraph(escape(title), styles[\"Title\"])) story.append(Paragraph(escape(heading), styles[\"Heading2\"])) story.append(Paragraph(escape(text), styles[\"Normal\"])) story.append(Spacer(1, 2 * inch)) doc.build(story) data = open(tmpfilename, \"rb\").read() os.unlink(tmpfilename) response.headers['Content-Type'] = 'application/pdf' return data Does this library have any framework integration? Yes, if you use web2py, you can make simple HTML reports that can be viewed in a browser, or downloaded as PDF. Also, using web2py DAL, you can easily set up a templating engine for PDF documents. Look at [Web2Py] (Web2Py.md) for examples. # TODO fix link What is the development status of this library? This library was improved over the years since the initial port from PHP. Some code is in early development stages (mainly UTF-8 support and some advanced features). The good news is that PHP versions and examples are available from a long time ago, so migration and some bug-fixes are easy. Said that, a former version is working successfully and is commercially supported since late 2008 for electronic invoice templates compliant with AFIP (Argentina IRS) normative, in several environments (Linux, Windows, etc.). It was originally included in PyRece , with thousands downloads to date. For further information see: http://www.pyafipws.com.ar/ http://code.google.com/p/pyafipws/ http://groups.google.com/group/pyafipws In contrast, write_html support is not complete, so it must be considered in alpha state. Further enhancements using web2py helpers and an XML parser will enable parsing more complex HTML files. What is the license of this library (pyfpdf)? LGPL v3.0. Original FPDF uses a permissive license: http://www.fpdf.org/en/FAQ.php#q1 \"FPDF is released under a permissive license: there is no usage restriction. You may embed it freely in your application (commercial or not), with or without modifications.\" FPDF version 1.6's license.txt says: http://www.fpdf.org/es/dl.php?v=16&f=zip Permission is hereby granted, free of charge, to any person obtaining a copy of this software to use, copy, modify, distribute, sublicense, and/or sell copies of the software, and to permit persons to whom the software is furnished to do so. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED. The fpdf.py library is a revision of a port by Max Pat. The original source uses the same licence: http://www.fpdf.org/dl.php?id=94 # * Software: FPDF # * Version: 1.53 # * Date: 2004-12-31 # * Author: Olivier PLATHEY # * License: Freeware # * # * You may use and modify this software as you wish. # * Ported to Python 2.4 by Max (maxpat78@yahoo.it) on 2006-05 To avoid ambiguity (and to be compatible with other free software, open source licenses), LGPL was chosen for the Google Code project (as freeware isn't listed). Some FPDF ports had chosen similar licences (wxWindows Licence for C++ port, MIT licence for Java port, etc.): http://www.fpdf.org/en/links.php Other FPDF derivatives also choose LGPL, such as sFPDF by Ian Back .","title":"FAQ"},{"location":"FAQ.html#faq","text":"See Project Home for an overall introduction. FAQ What is FPDF? What is this library not? How does this library compare to ...? What does the code look like? Does this library have any framework integration? What is the development status of this library? What is the license of this library (pyfpdf)?","title":"FAQ"},{"location":"FAQ.html#what-is-fpdf","text":"FPDF (and PyFPDF) is a library with low-level primitives to easily generate PDF documents. This is similar to ReportLab's graphics canvas, but with some methods to output \"fluid\" cells (\"flowables\" that can span multiple rows, pages, tables, columns, etc). It has two methods (\"hooks\") that can be implemented in a subclass, headers and footers. Originally developed in PHP several years ago (as a free alternative to proprietary C libraries), it has been ported to many programming languages, including ASP, C++, Java, Pl/SQL, Ruby, Visual Basic, and of course, Python. For more information see: http://www.fpdf.org/en/links.php","title":"What is FPDF?"},{"location":"FAQ.html#what-is-this-library-not","text":"This library is not a: charts or widgets library (but you can import PNG or JPG images, use PIL or any other library, or draw the figures yourself; see examples) \"flexible page layout engine\" like Reportlab PLATYPUS (but it can do columns, chapters, etc.; see the Tutorial ) XML or object definition language like Geraldo Reports , Jasper Reports, or similar (but look at write_html for simple HTML reports and Templates for fill-in-the-blank documents) PDF text extractor, converter, splitter or similar. Look at pyPdf .","title":"What is this library not?"},{"location":"FAQ.html#how-does-this-library-compare-to","text":"The API is geared toward giving the user access to features of the Portable Document Format as they are described in the Adobe PDF Reference Manual, this bypasses needless complexities for simpler use cases. It is small: Source folder < 200Kb. It includes cell and multi_cell primitives to draw fluid document like invoices, listings and reports, and includes basic support for HTML rendering. Compared to other solutions, this library should be easier to use and adapt for most common documents (no need to use a page layout engine, style sheets, templates, or stories...), with full control over the generated PDF document (including advanced features and extensions).","title":"How does this library compare to ...?"},{"location":"FAQ.html#what-does-the-code-look-like","text":"Following is an example similar to the Reportlab one in the book of web2py. Note the simplified import and usage: ( http://www.web2py.com/book/default/chapter/09?search=pdf#ReportLab-and-PDF ) PyFPDF: from fpdf import FPDF def get_me_a_pyfpdf(): title = \"This The Doc Title\" heading = \"First Paragraph\" text = 'bla ' * 10000 pdf = FPDF() pdf.add_page() pdf.set_font('Times', 'B', 15) pdf.cell(w=210, h=9, txt=title, border=0, ln=1, align='C', fill=0) pdf.set_font('Times', 'B', 15) pdf.cell(w=0, h=6, txt=heading, border=0, ln=1, align='L', fill=0) pdf.set_font('Times', '', 12) pdf.multi_cell(w=0, h=5, txt=text) response.headers['Content-Type'] = 'application/pdf' return pdf.output(dest='S') Reportlab: from reportlab.platypus import * from reportlab.lib.styles import getSampleStyleSheet from reportlab.rl_config import defaultPageSize from reportlab.lib.units import inch, mm from reportlab.lib.enums import TA_LEFT, TA_RIGHT, TA_CENTER, TA_JUSTIFY from reportlab.lib import colors from uuid import uuid4 from cgi import escape import os def get_me_a_pdf(): title = \"This The Doc Title\" heading = \"First Paragraph\" text = 'bla ' * 10000 styles = getSampleStyleSheet() tmpfilename = os.path.join(request.folder, 'private', str(uuid4())) doc = SimpleDocTemplate(tmpfilename) story = [] story.append(Paragraph(escape(title), styles[\"Title\"])) story.append(Paragraph(escape(heading), styles[\"Heading2\"])) story.append(Paragraph(escape(text), styles[\"Normal\"])) story.append(Spacer(1, 2 * inch)) doc.build(story) data = open(tmpfilename, \"rb\").read() os.unlink(tmpfilename) response.headers['Content-Type'] = 'application/pdf' return data","title":"What does the code look like?"},{"location":"FAQ.html#does-this-library-have-any-framework-integration","text":"Yes, if you use web2py, you can make simple HTML reports that can be viewed in a browser, or downloaded as PDF. Also, using web2py DAL, you can easily set up a templating engine for PDF documents. Look at [Web2Py] (Web2Py.md) for examples. # TODO fix link","title":"Does this library have any framework integration?"},{"location":"FAQ.html#what-is-the-development-status-of-this-library","text":"This library was improved over the years since the initial port from PHP. Some code is in early development stages (mainly UTF-8 support and some advanced features). The good news is that PHP versions and examples are available from a long time ago, so migration and some bug-fixes are easy. Said that, a former version is working successfully and is commercially supported since late 2008 for electronic invoice templates compliant with AFIP (Argentina IRS) normative, in several environments (Linux, Windows, etc.). It was originally included in PyRece , with thousands downloads to date. For further information see: http://www.pyafipws.com.ar/ http://code.google.com/p/pyafipws/ http://groups.google.com/group/pyafipws In contrast, write_html support is not complete, so it must be considered in alpha state. Further enhancements using web2py helpers and an XML parser will enable parsing more complex HTML files.","title":"What is the development status of this library?"},{"location":"FAQ.html#what-is-the-license-of-this-library-pyfpdf","text":"LGPL v3.0. Original FPDF uses a permissive license: http://www.fpdf.org/en/FAQ.php#q1 \"FPDF is released under a permissive license: there is no usage restriction. You may embed it freely in your application (commercial or not), with or without modifications.\" FPDF version 1.6's license.txt says: http://www.fpdf.org/es/dl.php?v=16&f=zip Permission is hereby granted, free of charge, to any person obtaining a copy of this software to use, copy, modify, distribute, sublicense, and/or sell copies of the software, and to permit persons to whom the software is furnished to do so. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED. The fpdf.py library is a revision of a port by Max Pat. The original source uses the same licence: http://www.fpdf.org/dl.php?id=94 # * Software: FPDF # * Version: 1.53 # * Date: 2004-12-31 # * Author: Olivier PLATHEY # * License: Freeware # * # * You may use and modify this software as you wish. # * Ported to Python 2.4 by Max (maxpat78@yahoo.it) on 2006-05 To avoid ambiguity (and to be compatible with other free software, open source licenses), LGPL was chosen for the Google Code project (as freeware isn't listed). Some FPDF ports had chosen similar licences (wxWindows Licence for C++ port, MIT licence for Java port, etc.): http://www.fpdf.org/en/links.php Other FPDF derivatives also choose LGPL, such as sFPDF by Ian Back .","title":"What is the license of this library (pyfpdf)?"},{"location":"ReferenceManual.html","text":"PyFPDF Reference Manual PyFPDF Reference Manual fpdf Python API Classes Methods Pages Margins Fonts Links Metadata Text Geometry Colors Imaging Barcodes Original FPDF API Additional API fpdf Python API Classes FPDF - constructor Methods Pages add_page - add a new page page_no - page number alias_nb_pages - define an alias for number of pages close - terminate the document (internal api) output - save or send the document header - page header footer - page footer Margins set_margins - set margins set_left_margin - set left margin set_right_margin - set right margin set_top_margin - set top margin set_auto_page_break - set the automatic page breaking mode Fonts add_font - add a new font set_font - set font set_font_size - set font size Links link - put a link add_link - create an internal link set_link - set internal link destination Metadata set_author - set the document author set_compression - turn compression on or off set_creator - set document creator set_keywords - associate keywords with document set_subject - set document subject set_title - set document title set_display_mode - set display mode Text text - print a string write - print flowing text cell - print a cell multi_cell - print text with line breaks get_string_width - compute string length ln - line break set_line_width - set line width Geometry get_x - get current x position get_y - get current y position set_x - set current x position set_xy - set current x and y positions set_y - set current y position line - draw a line rect - draw a rectangle Colors set_draw_color - set drawing color set_fill_color - set filling color set_text_color - set text color Imaging image - output an image Barcodes interleaved2of5 - add a new barcode with Interleaved 2 of 5 schema code39 - add a new barcode with C39 schema Original FPDF API Important : the original FPDF (PHP) naming convention is CamelCase. This library uses PEP8's lower_case_with_underscores recommendation. The contents of this section are the same as those of the previous section except organized like the PHP Library. This is also the format that was used in versions 1.x.x of this library. For the PHP documentation refer to the FPDF website. accept_page_break - determine whether to issue automatic page break add_font - add a new font add_link - create an internal link add_page - add a new page alias_nb_pages - define an alias for number of pages cell - print a cell close - terminate the document error - fatal error footer - page footer FPDF - constructor get_string_width - compute string length get_x - get current x position get_y - get current y position header - page header image - output an image line - draw a line link - put a link ln - line break multi_cell - print text with line breaks output - save or send the document page_no - page number rect - draw a rectangle set_author - set the document author set_auto_page_break - set the automatic page breaking mode set_compression - turn compression on or off set_creator - set document creator set_display_mode - set display mode set_draw_color - set drawing color set_fill_color - set filling color set_font - set font set_font_size - set font size set_keywords - associate keywords with document set_left_margin - set left margin set_line_width - set line width set_link - set internal link destination set_margins - set margins set_right_margin - set right margin set_subject - set document subject set_text_color - set text color set_title - set document title set_top_margin - set top margin set_x - set current x position set_xy - set current x and y positions set_y - set current y position text - print a string write - print flowing text Additional API These features are not available in the original FPDF and were implemented after forking. dashed_line - draw a dashed line ellipse - draw an ellipse rotate - rotation around a given center set_doc_option - set document options set_stretching - set horizontal font stretching write_html - print text with HTML markup Obsolete, under review.","title":"Reference Manual"},{"location":"ReferenceManual.html#pyfpdf-reference-manual","text":"PyFPDF Reference Manual fpdf Python API Classes Methods Pages Margins Fonts Links Metadata Text Geometry Colors Imaging Barcodes Original FPDF API Additional API","title":"PyFPDF Reference Manual"},{"location":"ReferenceManual.html#fpdf-python-api","text":"","title":"fpdf Python API"},{"location":"ReferenceManual.html#classes","text":"FPDF - constructor","title":"Classes"},{"location":"ReferenceManual.html#methods","text":"","title":"Methods"},{"location":"ReferenceManual.html#pages","text":"add_page - add a new page page_no - page number alias_nb_pages - define an alias for number of pages close - terminate the document (internal api) output - save or send the document header - page header footer - page footer","title":"Pages"},{"location":"ReferenceManual.html#margins","text":"set_margins - set margins set_left_margin - set left margin set_right_margin - set right margin set_top_margin - set top margin set_auto_page_break - set the automatic page breaking mode","title":"Margins"},{"location":"ReferenceManual.html#fonts","text":"add_font - add a new font set_font - set font set_font_size - set font size","title":"Fonts"},{"location":"ReferenceManual.html#links","text":"link - put a link add_link - create an internal link set_link - set internal link destination","title":"Links"},{"location":"ReferenceManual.html#metadata","text":"set_author - set the document author set_compression - turn compression on or off set_creator - set document creator set_keywords - associate keywords with document set_subject - set document subject set_title - set document title set_display_mode - set display mode","title":"Metadata"},{"location":"ReferenceManual.html#text","text":"text - print a string write - print flowing text cell - print a cell multi_cell - print text with line breaks get_string_width - compute string length ln - line break set_line_width - set line width","title":"Text"},{"location":"ReferenceManual.html#geometry","text":"get_x - get current x position get_y - get current y position set_x - set current x position set_xy - set current x and y positions set_y - set current y position line - draw a line rect - draw a rectangle","title":"Geometry"},{"location":"ReferenceManual.html#colors","text":"set_draw_color - set drawing color set_fill_color - set filling color set_text_color - set text color","title":"Colors"},{"location":"ReferenceManual.html#imaging","text":"image - output an image","title":"Imaging"},{"location":"ReferenceManual.html#barcodes","text":"interleaved2of5 - add a new barcode with Interleaved 2 of 5 schema code39 - add a new barcode with C39 schema","title":"Barcodes"},{"location":"ReferenceManual.html#original-fpdf-api","text":"Important : the original FPDF (PHP) naming convention is CamelCase. This library uses PEP8's lower_case_with_underscores recommendation. The contents of this section are the same as those of the previous section except organized like the PHP Library. This is also the format that was used in versions 1.x.x of this library. For the PHP documentation refer to the FPDF website. accept_page_break - determine whether to issue automatic page break add_font - add a new font add_link - create an internal link add_page - add a new page alias_nb_pages - define an alias for number of pages cell - print a cell close - terminate the document error - fatal error footer - page footer FPDF - constructor get_string_width - compute string length get_x - get current x position get_y - get current y position header - page header image - output an image line - draw a line link - put a link ln - line break multi_cell - print text with line breaks output - save or send the document page_no - page number rect - draw a rectangle set_author - set the document author set_auto_page_break - set the automatic page breaking mode set_compression - turn compression on or off set_creator - set document creator set_display_mode - set display mode set_draw_color - set drawing color set_fill_color - set filling color set_font - set font set_font_size - set font size set_keywords - associate keywords with document set_left_margin - set left margin set_line_width - set line width set_link - set internal link destination set_margins - set margins set_right_margin - set right margin set_subject - set document subject set_text_color - set text color set_title - set document title set_top_margin - set top margin set_x - set current x position set_xy - set current x and y positions set_y - set current y position text - print a string write - print flowing text","title":"Original FPDF API"},{"location":"ReferenceManual.html#additional-api","text":"These features are not available in the original FPDF and were implemented after forking. dashed_line - draw a dashed line ellipse - draw an ellipse rotate - rotation around a given center set_doc_option - set document options set_stretching - set horizontal font stretching write_html - print text with HTML markup Obsolete, under review.","title":"Additional API"},{"location":"Templates.html","text":"Introduction Templates are predefined documents (like invoices, tax forms, etc.), where each element (text, lines, barcodes, etc.) has a fixed position (x1, y1, x2, y2), style (font, size, etc.) and a default text. This elements can act as placeholders, so the program can change the default text \"filling\" the document. Also, the elements can be defined in a CSV file or in a database, so the user can easily adapt the form to his printing needs. A template is used like a dict, setting its items' values. Details - Template definition A template is composed of a header and a list of elements. The header contains the page format, title of the document and other metadata. Elements have the following properties (columns in a CSV, fields in a database): name: placeholder identification type: 'T': texts, 'L': lines, 'I': images, 'B': boxes, 'BC': barcodes (Interleaved 2 of 5) - alias for BCI25, 'BCI25': barcodes (Interleaved 2 of 5), 'BCC39': barcodes (C39), x1, y1, x2, y2: top-left, bottom-right coordinates (in mm) font: e.g. \"Arial\" size: text size in points, e.g. 10 bold, italic, underline: text style (non-empty to enable) foreground, background: text and fill colors, e.g. 0xFFFFFF align: text alignment, 'L': left, 'R': right, 'C': center text: default string, can be replaced at runtime priority: Z-order multiline: None for single line (default), True to for multicells (multiple lines), False trims to exactly fit the space defined How to create a template A template can be created in 3 ways: By defining everything manually in a hardcoded way By using a template definition in a CSV document and parsing the CSV with Template.parse_dict() By defining the template in a database (this applies to [Web2Py] (Web2Py.md) integration) Note the following, the definition of a template will contain the elements. The header will be given during instantiation (except for the database method). Example - Hardcoded from fpdf import Template #this will define the ELEMENTS that will compose the template. elements = [ { 'name': 'company_logo', 'type': 'I', 'x1': 20.0, 'y1': 17.0, 'x2': 78.0, 'y2': 30.0, 'font': None, 'size': 0.0, 'bold': 0, 'italic': 0, 'underline': 0, 'foreground': 0, 'background': 0, 'align': 'I', 'text': 'logo', 'priority': 2, }, { 'name': 'company_name', 'type': 'T', 'x1': 17.0, 'y1': 32.5, 'x2': 115.0, 'y2': 37.5, 'font': 'Arial', 'size': 12.0, 'bold': 1, 'italic': 0, 'underline': 0, 'foreground': 0, 'background': 0, 'align': 'I', 'text': '', 'priority': 2, }, { 'name': 'box', 'type': 'B', 'x1': 15.0, 'y1': 15.0, 'x2': 185.0, 'y2': 260.0, 'font': 'Arial', 'size': 0.0, 'bold': 0, 'italic': 0, 'underline': 0, 'foreground': 0, 'background': 0, 'align': 'I', 'text': None, 'priority': 0, }, { 'name': 'box_x', 'type': 'B', 'x1': 95.0, 'y1': 15.0, 'x2': 105.0, 'y2': 25.0, 'font': 'Arial', 'size': 0.0, 'bold': 1, 'italic': 0, 'underline': 0, 'foreground': 0, 'background': 0, 'align': 'I', 'text': None, 'priority': 2, }, { 'name': 'line1', 'type': 'L', 'x1': 100.0, 'y1': 25.0, 'x2': 100.0, 'y2': 57.0, 'font': 'Arial', 'size': 0, 'bold': 0, 'italic': 0, 'underline': 0, 'foreground': 0, 'background': 0, 'align': 'I', 'text': None, 'priority': 3, }, { 'name': 'barcode', 'type': 'BC', 'x1': 20.0, 'y1': 246.5, 'x2': 140.0, 'y2': 254.0, 'font': 'Interleaved 2of5 NT', 'size': 0.75, 'bold': 0, 'italic': 0, 'underline': 0, 'foreground': 0, 'background': 0, 'align': 'I', 'text': '200000000001000159053338016581200810081', 'priority': 3, }, ] #here we instantiate the template and define the HEADER f = Template(format=\"A4\", elements=elements, title=\"Sample Invoice\") f.add_page() #we FILL some of the fields of the template with the information we want #note we access the elements treating the template instance as a \"dict\" f[\"company_name\"] = \"Sample Company\" f[\"company_logo\"] = \"pyfpdf/tutorial/logo.png\" #and now we render the page f.render(\"./template.pdf\") See template.py or [Web2Py] (Web2Py.md) for a complete example. Example - Elements defined in CSV file You define your elements in a CSV file \"mycsvfile.csv\" that will look like: line0;T;20.0;13.0;190.0;13.0;times;10.0;0;0;0;0;65535;C;;0 line1;T;20.0;67.0;190.0;67.0;times;10.0;0;0;0;0;65535;C;;0 name0;T;21;14;104;25;times;16.0;0;0;0;0;0;C;;2 title0;T;64;26;104;30;times;10.0;0;0;0;0;0;C;;2 Remember that each line represents an element and each field represents one of the properties of the element in the following order: ('name','type','x1','y1','x2','y2','font','size','bold','italic','underline','foreground','background','align','text','priority', 'multiline') Then you can use the file like this: def test_template(): f = Template(format=\"A4\", title=\"Sample Invoice\") f.parse_csv(\"mycsvfile.csv\") f.add_page() f[\"company_name\"] = \"Sample Company\" response.headers['Content-Type'] = 'application/pdf' return f.render(\"./template.pdf\", dest='S') Designer - GUI tool to design templates This library includes a program designer.py to visually modify the designs of a template (e.g., an invoice, report, etc.). Input files are CSV spreadsheets describing the design (see above). Once opened, the designer displays the template with the elements as how they will be located. The toolbar has buttons for: Open, save and print (preview) template Add, delete and duplicate Find items by name or by text Find and replace (modify selected elements, mainly move x/y) Over an element, double left click opens a dialog to edit its text and right click opens a dialog with the properties window. You can select multiple items by holding down shift and left clicking them. To move the elements you can use the arrow keys or drag the elements. To run it, just go to the directory and run: python designer.py (you need to have wx installed). If you are having problems making it work, change the imports on designer.py file to the following (it should be fixed in the next version): import os, sys import wx import wx.lib import wx.lib.ogl as ogl try: from wx.lib.wordwrap import wordwrap except ImportError: wordwrap = lambda text, width, dc: text try: from template import Template except ImportError: # we are frozen? from fpdf.template import Template As an example, the following screenshot shows the Visual Designer, with the sample invoice.csv file open and 'logo' element selected, editing its properties:","title":"Templates"},{"location":"Templates.html#introduction","text":"Templates are predefined documents (like invoices, tax forms, etc.), where each element (text, lines, barcodes, etc.) has a fixed position (x1, y1, x2, y2), style (font, size, etc.) and a default text. This elements can act as placeholders, so the program can change the default text \"filling\" the document. Also, the elements can be defined in a CSV file or in a database, so the user can easily adapt the form to his printing needs. A template is used like a dict, setting its items' values.","title":"Introduction"},{"location":"Templates.html#details-template-definition","text":"A template is composed of a header and a list of elements. The header contains the page format, title of the document and other metadata. Elements have the following properties (columns in a CSV, fields in a database): name: placeholder identification type: 'T': texts, 'L': lines, 'I': images, 'B': boxes, 'BC': barcodes (Interleaved 2 of 5) - alias for BCI25, 'BCI25': barcodes (Interleaved 2 of 5), 'BCC39': barcodes (C39), x1, y1, x2, y2: top-left, bottom-right coordinates (in mm) font: e.g. \"Arial\" size: text size in points, e.g. 10 bold, italic, underline: text style (non-empty to enable) foreground, background: text and fill colors, e.g. 0xFFFFFF align: text alignment, 'L': left, 'R': right, 'C': center text: default string, can be replaced at runtime priority: Z-order multiline: None for single line (default), True to for multicells (multiple lines), False trims to exactly fit the space defined","title":"Details - Template definition"},{"location":"Templates.html#how-to-create-a-template","text":"A template can be created in 3 ways: By defining everything manually in a hardcoded way By using a template definition in a CSV document and parsing the CSV with Template.parse_dict() By defining the template in a database (this applies to [Web2Py] (Web2Py.md) integration) Note the following, the definition of a template will contain the elements. The header will be given during instantiation (except for the database method).","title":"How to create a template"},{"location":"Templates.html#example-hardcoded","text":"from fpdf import Template #this will define the ELEMENTS that will compose the template. elements = [ { 'name': 'company_logo', 'type': 'I', 'x1': 20.0, 'y1': 17.0, 'x2': 78.0, 'y2': 30.0, 'font': None, 'size': 0.0, 'bold': 0, 'italic': 0, 'underline': 0, 'foreground': 0, 'background': 0, 'align': 'I', 'text': 'logo', 'priority': 2, }, { 'name': 'company_name', 'type': 'T', 'x1': 17.0, 'y1': 32.5, 'x2': 115.0, 'y2': 37.5, 'font': 'Arial', 'size': 12.0, 'bold': 1, 'italic': 0, 'underline': 0, 'foreground': 0, 'background': 0, 'align': 'I', 'text': '', 'priority': 2, }, { 'name': 'box', 'type': 'B', 'x1': 15.0, 'y1': 15.0, 'x2': 185.0, 'y2': 260.0, 'font': 'Arial', 'size': 0.0, 'bold': 0, 'italic': 0, 'underline': 0, 'foreground': 0, 'background': 0, 'align': 'I', 'text': None, 'priority': 0, }, { 'name': 'box_x', 'type': 'B', 'x1': 95.0, 'y1': 15.0, 'x2': 105.0, 'y2': 25.0, 'font': 'Arial', 'size': 0.0, 'bold': 1, 'italic': 0, 'underline': 0, 'foreground': 0, 'background': 0, 'align': 'I', 'text': None, 'priority': 2, }, { 'name': 'line1', 'type': 'L', 'x1': 100.0, 'y1': 25.0, 'x2': 100.0, 'y2': 57.0, 'font': 'Arial', 'size': 0, 'bold': 0, 'italic': 0, 'underline': 0, 'foreground': 0, 'background': 0, 'align': 'I', 'text': None, 'priority': 3, }, { 'name': 'barcode', 'type': 'BC', 'x1': 20.0, 'y1': 246.5, 'x2': 140.0, 'y2': 254.0, 'font': 'Interleaved 2of5 NT', 'size': 0.75, 'bold': 0, 'italic': 0, 'underline': 0, 'foreground': 0, 'background': 0, 'align': 'I', 'text': '200000000001000159053338016581200810081', 'priority': 3, }, ] #here we instantiate the template and define the HEADER f = Template(format=\"A4\", elements=elements, title=\"Sample Invoice\") f.add_page() #we FILL some of the fields of the template with the information we want #note we access the elements treating the template instance as a \"dict\" f[\"company_name\"] = \"Sample Company\" f[\"company_logo\"] = \"pyfpdf/tutorial/logo.png\" #and now we render the page f.render(\"./template.pdf\") See template.py or [Web2Py] (Web2Py.md) for a complete example.","title":"Example - Hardcoded"},{"location":"Templates.html#example-elements-defined-in-csv-file","text":"You define your elements in a CSV file \"mycsvfile.csv\" that will look like: line0;T;20.0;13.0;190.0;13.0;times;10.0;0;0;0;0;65535;C;;0 line1;T;20.0;67.0;190.0;67.0;times;10.0;0;0;0;0;65535;C;;0 name0;T;21;14;104;25;times;16.0;0;0;0;0;0;C;;2 title0;T;64;26;104;30;times;10.0;0;0;0;0;0;C;;2 Remember that each line represents an element and each field represents one of the properties of the element in the following order: ('name','type','x1','y1','x2','y2','font','size','bold','italic','underline','foreground','background','align','text','priority', 'multiline') Then you can use the file like this: def test_template(): f = Template(format=\"A4\", title=\"Sample Invoice\") f.parse_csv(\"mycsvfile.csv\") f.add_page() f[\"company_name\"] = \"Sample Company\" response.headers['Content-Type'] = 'application/pdf' return f.render(\"./template.pdf\", dest='S')","title":"Example - Elements defined in CSV file"},{"location":"Templates.html#designer-gui-tool-to-design-templates","text":"This library includes a program designer.py to visually modify the designs of a template (e.g., an invoice, report, etc.). Input files are CSV spreadsheets describing the design (see above). Once opened, the designer displays the template with the elements as how they will be located. The toolbar has buttons for: Open, save and print (preview) template Add, delete and duplicate Find items by name or by text Find and replace (modify selected elements, mainly move x/y) Over an element, double left click opens a dialog to edit its text and right click opens a dialog with the properties window. You can select multiple items by holding down shift and left clicking them. To move the elements you can use the arrow keys or drag the elements. To run it, just go to the directory and run: python designer.py (you need to have wx installed). If you are having problems making it work, change the imports on designer.py file to the following (it should be fixed in the next version): import os, sys import wx import wx.lib import wx.lib.ogl as ogl try: from wx.lib.wordwrap import wordwrap except ImportError: wordwrap = lambda text, width, dc: text try: from template import Template except ImportError: # we are frozen? from fpdf.template import Template As an example, the following screenshot shows the Visual Designer, with the sample invoice.csv file open and 'logo' element selected, editing its properties:","title":"Designer - GUI tool to design templates"},{"location":"Tutorial-es.html","text":"Los diferentes ejemplos muestran rapidamente como usar PyFPDF. Encontrar\u00e1 todas las caracter\u00edsticas principales explicadas. English: Tutorial Ejemplo M\u00ednimo Encabezado, pie de p\u00e1gina, salto de p\u00e1gina e im\u00e1gen Saltos de l\u00ednea y colores Notas de instalaci\u00f3n Ejemplo M\u00ednimo Empecemos con el ejemplo cl\u00e1sico: from fpdf import FPDF pdf = FPDF() pdf.add_page() pdf.set_font('Arial', 'B', 16) pdf.cell(40, 10, 'Hola Mundo!') pdf.output('tuto1.pdf', 'F') Demo Luego de incluir la biblioteca, creamos un objeto FPDF. El constructor FPDF es usado aqui con los valores predeterminados: p\u00e1ginas en A4 portrait -vertical- y la unidad de medida en milimetros. Podr\u00eda haberlos especificado explicitamente: pdf=FPDF('P', 'mm', 'A4') Es posible usar landscape -apaisado- (L), otros formatos de p\u00e1gina (como Letter -carta- y Legal -oficio-) y \u00fanidad de medida (pt, cm, in). Por el momento no hay una p\u00e1gina, entonces tenemos que agregar una con add_page . El origen es la esquina superior-izquierda y la posici\u00f3n actual est\u00e1 ubicada a 1 cm de los bordes; los margenes pueden ser cambiados con set_margins . Antes de que pod\u00e1mos imprimir texto, es obligatorio seleccionar una fuente con set_font , de lo contrario el documento ser\u00e1 inv\u00e1lido. Elegimos Arial bold 16: pdf.set_font('Arial', 'B', 16) Podr\u00edamos haber especificado italic -cursiva- con I, underline -subrayado- con U o fuente regular con string vacio (o cualquier combinaci\u00f3n). Noar que el tama\u00f1o de la fuente es dado en puntos, no milimetros (u otra unidad de medida del usuario); esta es la \u00fanica excepci\u00f3n. Las otras fuentes est\u00e1ndar son Times, Courier, Symbol y ZapfDingbats. Podemos ahora imprimir una celda con cell . Una celda es un \u00e1rea rectangular, posiblemente enmarcada, que contiene alg\u00fan texto. Se imprime en la posici\u00f3n actual. Especificamos sus dimensiones, su texto (centrado o alineado), si los bordes deber\u00edan ser dibujados, y donde la posici\u00f3n actual se mueve despu\u00e9s (a la derecha, abajo o al principio de la pr\u00f3xima linea). Para agregar un marco, haremos: pdf.cell(40, 10, 'Hola mundo !', 1) Para agregar una nueva celda pr\u00f3xima a ella con texto centrada y luego ir a la siguiente l\u00ednea, har\u00edamos: pdf.cell(60, 10, 'Hecho con FPDF.', 0, 1, 'C') Nota : el salto de l\u00ednea puede hacerse tambi\u00e9n con ln . Este m\u00e9todo permite especificar adicionalmente la altura del salto. Finalmente, el documento es cerrado y enviado al explorador con output . Podemos haberlo grabado a un fichero al pasarle el nombre de archivo. Precauci\u00f3n : en caso cuando el PDF es enviado al explorador, nada m\u00e1s debe ser envi\u00e1do a la salida, ni antes ni despu\u00e9s (el m\u00ednimo caracter importa). Encabezado, pie de p\u00e1gina, salto de p\u00e1gina e im\u00e1gen Aqu\u00ed hay un ejemplo de dos p\u00e1ginas con encabezado, pie y logo: from fpdf import FPDF class PDF(FPDF): def header(self): # Logo self.image('logo_pb.png', 10, 8, 33) # Arial bold 15 self.set_font('Arial', 'B', 15) # Move to the right self.cell(80) # Title self.cell(30, 10, 'Title', 1, 0, 'C') # Line break self.ln(20) # Page footer def footer(self): # Position at 1.5 cm from bottom self.set_y(-15) # Arial italic 8 self.set_font('Arial', 'I', 8) # Page number self.cell(0, 10, 'Page ' + str(self.page_no()) + '/{nb}', 0, 0, 'C') # Instantiation of inherited class pdf = PDF() pdf.alias_nb_pages() pdf.add_page() pdf.set_font('Times', '', 12) for i in range(1, 41): pdf.cell(0, 10, 'Printing line number ' + str(i), 0, 1) pdf.output('tuto2.pdf', 'F') Demo Este ejemplo hace uso de m\u00e9todos header y footer para procesar el encabezado y pie. Son llamados autom\u00e1ticamente. Ya existen en la clase FPDF pero no hacen nada, por lo tanto tenemos que extender la clase y sobreescribirlos. El log es impreso con el m\u00e9todo image especificando su esquina superior izquierda y su ancho. La altura es calculada autom\u00e1ticamente para respetar las proporciones de la im\u00e1gen. Para imprimir el n\u00famero de p\u00e1gina, un valor nulo es pasado como ancho de celda. Significa que la celda deber\u00e1 ser extendida hasta el margen derecho de la p\u00e1gina; es \u00fatil centrar texto. El n\u00famero de p\u00e1gina actual es devuelto por el m\u00e9todo page_no ; y para el n\u00famero total de p\u00e1ginas, ser\u00e1 obtenido mediante el valor especial {nb} que ser\u00e1 sustituido al cerrar el documento (si de antemano se llam\u00f3 alias_nb_pages ). Notar el uso del m\u00e9todo set_y que permite establecer la posici\u00f3n en una ubicaci\u00f3n absoluta en la p\u00e1gina, empezando desde arriba hacia abajo. Otra caracter\u00edstica interesante es usada aqu\u00ed: el salto de p\u00e1gina autom\u00e1tico. Tan pronto una celda cruza el l\u00edmite de una p\u00e1gina (por defecto a 2 centimetros desde abajo), un salto es realizado y la fuente es restaurada. Aunque el encabezado y pie de p\u00e1gina tienen su propia fuente (Arial), el cuerpo continua en Times. Este mecanismo de restauraci\u00f3n autom\u00e1tica tambien se aplica a los colores y el ancho de la l\u00ednea. El l\u00edmite que dispara los saltos de p\u00e1gina puede establecerce con set_auto_page_break . Saltos de l\u00ednea y colores Continuemos con un ejemplo que imprime parrafos justificados. Tambi\u00e9n ilustra el uso de colores. from fpdf import FPDF title = '20000 Leagues Under the Seas' class PDF(FPDF): def header(self): # Arial bold 15 self.set_font('Arial', 'B', 15) # Calcular ancho del texto (title) y establecer posici\u00f3n w = self.get_string_width(title) + 6 self.set_x((210 - w) / 2) # Colores del marco, fondo y texto self.set_draw_color(0, 80, 180) self.set_fill_color(230, 230, 0) self.set_text_color(220, 50, 50) # Grosor del marco (1 mm) self.set_line_width(1) # Titulo self.cell(w, 9, title, 1, 1, 'C', 1) # Salto de l\u00ednea self.ln(10) def footer(self): # Posici\u00f3n a 1.5 cm desde abajo self.set_y(-15) # Arial italic 8 self.set_font('Arial', 'I', 8) # Color de texto en gris self.set_text_color(128) # Numero de pagina self.cell(0, 10, 'Page ' + str(self.page_no()), 0, 0, 'C') def chapter_title(self, num, label): # Arial 12 self.set_font('Arial', '', 12) # Color de fondo self.set_fill_color(200, 220, 255) # Titulo self.cell(0, 6, 'Chapter %d : %s' % (num, label), 0, 1, 'L', 1) # Salto de l\u00ednea self.ln(4) def chapter_body(self, name): # Leer archivo de texto with open(name, 'rb') as fh: txt = fh.read().decode('latin-1') # Times 12 self.set_font('Times', '', 12) # Emitir texto justificado self.multi_cell(0, 5, txt) # Salto de l\u00ednea self.ln() # Menci\u00f3n en italic -cursiva- self.set_font('', 'I') self.cell(0, 5, '(end of excerpt)') def print_chapter(self, num, title, name): self.add_page() self.chapter_title(num, title) self.chapter_body(name) pdf = PDF() pdf.set_title(title) pdf.set_author('Jules Verne') pdf.print_chapter(1, 'A RUNAWAY REEF', '20k_c1.txt') pdf.print_chapter(2, 'THE PROS AND CONS', '20k_c2.txt') pdf.output('tuto3.pdf', 'F') Demo El m\u00e9todo get_string_width permite determinar la longitud de una cadena en la fuente actual, usado aqu\u00ed para calcular la posici\u00f3n y el ancho del marco que rodea al t\u00edtulo. Los colores son establecidos (v\u00eda set_draw_color , set_fill_color y set_text_color ) y el grosor de la l\u00ednea es establecido a 1 mm (contra 0.2 por defecto) con set_line_width . Finalmente, emitimos la celda (el \u00faltimo par\u00e1metro es True para indicar que el fondo debe ser rellenado). El m\u00e9todo usado para imprimir parrafos es multi_cell . Cada vez que una l\u00ednea alcanza el extremo derecho de la celda o un caracter de retorno de linea, un salto de l\u00ednea es emitido y una nueva celda es autom\u00e1ticamente creada bajo la actual. El texto es justificado por defecto. Dos propiedades del documento son definidas: el t\u00edtulo ( set_title ) y el autor ( set_author ). Las propiedades pueden ser vistas de dos formas. La primera es abrir el documento directamente con Acrobat Reader, ir al men\u00fa Archivo y elegir la opci\u00f3n Propiedades del Documento. La segunda, tambi\u00e9n disponible en el plug-in, es hacer click izquierdo y seleccionar Propiedades del documento (Document Properties). Notas de instalaci\u00f3n Anteriormente, para importar el objeto se deb\u00eda usar el paquete pyfpdf: from pyfpdf import FPDF A partir de la versi\u00f3n 1.7, para importar el objeto se debe usar el paquete fpdf: from fpdf import FPDF","title":"Tutorial (Spanish translation)"},{"location":"Tutorial-es.html#ejemplo-minimo","text":"Empecemos con el ejemplo cl\u00e1sico: from fpdf import FPDF pdf = FPDF() pdf.add_page() pdf.set_font('Arial', 'B', 16) pdf.cell(40, 10, 'Hola Mundo!') pdf.output('tuto1.pdf', 'F') Demo Luego de incluir la biblioteca, creamos un objeto FPDF. El constructor FPDF es usado aqui con los valores predeterminados: p\u00e1ginas en A4 portrait -vertical- y la unidad de medida en milimetros. Podr\u00eda haberlos especificado explicitamente: pdf=FPDF('P', 'mm', 'A4') Es posible usar landscape -apaisado- (L), otros formatos de p\u00e1gina (como Letter -carta- y Legal -oficio-) y \u00fanidad de medida (pt, cm, in). Por el momento no hay una p\u00e1gina, entonces tenemos que agregar una con add_page . El origen es la esquina superior-izquierda y la posici\u00f3n actual est\u00e1 ubicada a 1 cm de los bordes; los margenes pueden ser cambiados con set_margins . Antes de que pod\u00e1mos imprimir texto, es obligatorio seleccionar una fuente con set_font , de lo contrario el documento ser\u00e1 inv\u00e1lido. Elegimos Arial bold 16: pdf.set_font('Arial', 'B', 16) Podr\u00edamos haber especificado italic -cursiva- con I, underline -subrayado- con U o fuente regular con string vacio (o cualquier combinaci\u00f3n). Noar que el tama\u00f1o de la fuente es dado en puntos, no milimetros (u otra unidad de medida del usuario); esta es la \u00fanica excepci\u00f3n. Las otras fuentes est\u00e1ndar son Times, Courier, Symbol y ZapfDingbats. Podemos ahora imprimir una celda con cell . Una celda es un \u00e1rea rectangular, posiblemente enmarcada, que contiene alg\u00fan texto. Se imprime en la posici\u00f3n actual. Especificamos sus dimensiones, su texto (centrado o alineado), si los bordes deber\u00edan ser dibujados, y donde la posici\u00f3n actual se mueve despu\u00e9s (a la derecha, abajo o al principio de la pr\u00f3xima linea). Para agregar un marco, haremos: pdf.cell(40, 10, 'Hola mundo !', 1) Para agregar una nueva celda pr\u00f3xima a ella con texto centrada y luego ir a la siguiente l\u00ednea, har\u00edamos: pdf.cell(60, 10, 'Hecho con FPDF.', 0, 1, 'C') Nota : el salto de l\u00ednea puede hacerse tambi\u00e9n con ln . Este m\u00e9todo permite especificar adicionalmente la altura del salto. Finalmente, el documento es cerrado y enviado al explorador con output . Podemos haberlo grabado a un fichero al pasarle el nombre de archivo. Precauci\u00f3n : en caso cuando el PDF es enviado al explorador, nada m\u00e1s debe ser envi\u00e1do a la salida, ni antes ni despu\u00e9s (el m\u00ednimo caracter importa).","title":"Ejemplo M\u00ednimo"},{"location":"Tutorial-es.html#encabezado-pie-de-pagina-salto-de-pagina-e-imagen","text":"Aqu\u00ed hay un ejemplo de dos p\u00e1ginas con encabezado, pie y logo: from fpdf import FPDF class PDF(FPDF): def header(self): # Logo self.image('logo_pb.png', 10, 8, 33) # Arial bold 15 self.set_font('Arial', 'B', 15) # Move to the right self.cell(80) # Title self.cell(30, 10, 'Title', 1, 0, 'C') # Line break self.ln(20) # Page footer def footer(self): # Position at 1.5 cm from bottom self.set_y(-15) # Arial italic 8 self.set_font('Arial', 'I', 8) # Page number self.cell(0, 10, 'Page ' + str(self.page_no()) + '/{nb}', 0, 0, 'C') # Instantiation of inherited class pdf = PDF() pdf.alias_nb_pages() pdf.add_page() pdf.set_font('Times', '', 12) for i in range(1, 41): pdf.cell(0, 10, 'Printing line number ' + str(i), 0, 1) pdf.output('tuto2.pdf', 'F') Demo Este ejemplo hace uso de m\u00e9todos header y footer para procesar el encabezado y pie. Son llamados autom\u00e1ticamente. Ya existen en la clase FPDF pero no hacen nada, por lo tanto tenemos que extender la clase y sobreescribirlos. El log es impreso con el m\u00e9todo image especificando su esquina superior izquierda y su ancho. La altura es calculada autom\u00e1ticamente para respetar las proporciones de la im\u00e1gen. Para imprimir el n\u00famero de p\u00e1gina, un valor nulo es pasado como ancho de celda. Significa que la celda deber\u00e1 ser extendida hasta el margen derecho de la p\u00e1gina; es \u00fatil centrar texto. El n\u00famero de p\u00e1gina actual es devuelto por el m\u00e9todo page_no ; y para el n\u00famero total de p\u00e1ginas, ser\u00e1 obtenido mediante el valor especial {nb} que ser\u00e1 sustituido al cerrar el documento (si de antemano se llam\u00f3 alias_nb_pages ). Notar el uso del m\u00e9todo set_y que permite establecer la posici\u00f3n en una ubicaci\u00f3n absoluta en la p\u00e1gina, empezando desde arriba hacia abajo. Otra caracter\u00edstica interesante es usada aqu\u00ed: el salto de p\u00e1gina autom\u00e1tico. Tan pronto una celda cruza el l\u00edmite de una p\u00e1gina (por defecto a 2 centimetros desde abajo), un salto es realizado y la fuente es restaurada. Aunque el encabezado y pie de p\u00e1gina tienen su propia fuente (Arial), el cuerpo continua en Times. Este mecanismo de restauraci\u00f3n autom\u00e1tica tambien se aplica a los colores y el ancho de la l\u00ednea. El l\u00edmite que dispara los saltos de p\u00e1gina puede establecerce con set_auto_page_break .","title":"Encabezado, pie de p\u00e1gina, salto de p\u00e1gina e im\u00e1gen"},{"location":"Tutorial-es.html#saltos-de-linea-y-colores","text":"Continuemos con un ejemplo que imprime parrafos justificados. Tambi\u00e9n ilustra el uso de colores. from fpdf import FPDF title = '20000 Leagues Under the Seas' class PDF(FPDF): def header(self): # Arial bold 15 self.set_font('Arial', 'B', 15) # Calcular ancho del texto (title) y establecer posici\u00f3n w = self.get_string_width(title) + 6 self.set_x((210 - w) / 2) # Colores del marco, fondo y texto self.set_draw_color(0, 80, 180) self.set_fill_color(230, 230, 0) self.set_text_color(220, 50, 50) # Grosor del marco (1 mm) self.set_line_width(1) # Titulo self.cell(w, 9, title, 1, 1, 'C', 1) # Salto de l\u00ednea self.ln(10) def footer(self): # Posici\u00f3n a 1.5 cm desde abajo self.set_y(-15) # Arial italic 8 self.set_font('Arial', 'I', 8) # Color de texto en gris self.set_text_color(128) # Numero de pagina self.cell(0, 10, 'Page ' + str(self.page_no()), 0, 0, 'C') def chapter_title(self, num, label): # Arial 12 self.set_font('Arial', '', 12) # Color de fondo self.set_fill_color(200, 220, 255) # Titulo self.cell(0, 6, 'Chapter %d : %s' % (num, label), 0, 1, 'L', 1) # Salto de l\u00ednea self.ln(4) def chapter_body(self, name): # Leer archivo de texto with open(name, 'rb') as fh: txt = fh.read().decode('latin-1') # Times 12 self.set_font('Times', '', 12) # Emitir texto justificado self.multi_cell(0, 5, txt) # Salto de l\u00ednea self.ln() # Menci\u00f3n en italic -cursiva- self.set_font('', 'I') self.cell(0, 5, '(end of excerpt)') def print_chapter(self, num, title, name): self.add_page() self.chapter_title(num, title) self.chapter_body(name) pdf = PDF() pdf.set_title(title) pdf.set_author('Jules Verne') pdf.print_chapter(1, 'A RUNAWAY REEF', '20k_c1.txt') pdf.print_chapter(2, 'THE PROS AND CONS', '20k_c2.txt') pdf.output('tuto3.pdf', 'F') Demo El m\u00e9todo get_string_width permite determinar la longitud de una cadena en la fuente actual, usado aqu\u00ed para calcular la posici\u00f3n y el ancho del marco que rodea al t\u00edtulo. Los colores son establecidos (v\u00eda set_draw_color , set_fill_color y set_text_color ) y el grosor de la l\u00ednea es establecido a 1 mm (contra 0.2 por defecto) con set_line_width . Finalmente, emitimos la celda (el \u00faltimo par\u00e1metro es True para indicar que el fondo debe ser rellenado). El m\u00e9todo usado para imprimir parrafos es multi_cell . Cada vez que una l\u00ednea alcanza el extremo derecho de la celda o un caracter de retorno de linea, un salto de l\u00ednea es emitido y una nueva celda es autom\u00e1ticamente creada bajo la actual. El texto es justificado por defecto. Dos propiedades del documento son definidas: el t\u00edtulo ( set_title ) y el autor ( set_author ). Las propiedades pueden ser vistas de dos formas. La primera es abrir el documento directamente con Acrobat Reader, ir al men\u00fa Archivo y elegir la opci\u00f3n Propiedades del Documento. La segunda, tambi\u00e9n disponible en el plug-in, es hacer click izquierdo y seleccionar Propiedades del documento (Document Properties).","title":"Saltos de l\u00ednea y colores"},{"location":"Tutorial-es.html#notas-de-instalacion","text":"Anteriormente, para importar el objeto se deb\u00eda usar el paquete pyfpdf: from pyfpdf import FPDF A partir de la versi\u00f3n 1.7, para importar el objeto se debe usar el paquete fpdf: from fpdf import FPDF","title":"Notas de instalaci\u00f3n"},{"location":"Tutorial.html","text":"Tutorial Espa\u00f1ol: Tutorial-es Tutorial Minimal Example Header, footer, page break and image Line breaks and colors Installation Notes Minimal Example Let's start with the classic example: from fpdf import FPDF pdf = FPDF() pdf.add_page() pdf.set_font('Arial', 'B', 16) pdf.cell(40, 10, 'Hello World!') pdf.output('tuto1.pdf', 'F') Demo After including the library file, we create an FPDF object. The FPDF constructor is used here with the default values: pages are in A4 portrait and the measure unit is millimeter. It could have been specified explicitly with: pdf = FPDF('P', 'mm', 'A4') It is possible to use landscape ( L ), other page formats (such as Letter and Legal ) and measure units ( pt , cm , in ). There is no page for the moment, so we have to add one with add_page . The origin is at the upper-left corner and the current position is by default placed at 1 cm from the borders; the margins can be changed with set_margins . Before we can print text, it is mandatory to select a font with set_font , otherwise the document would be invalid. We choose Arial bold 16: pdf.set_font('Arial', 'B', 16) We could have specified italics with I , underlined with U or a regular font with an empty string (or any combination). Note that the font size is given in points, not millimeters (or another user unit); it is the only exception. The other standard fonts are Times , Courier , Symbol and ZapfDingbats . We can now print a cell with cell . A cell is a rectangular area, possibly framed, which contains some text. It is output at the current position. We specify its dimensions, its text (centered or aligned), if borders should be drawn, and where the current position moves after it (to the right, below or to the beginning of the next line). To add a frame, we would do this: pdf.cell(40, 10, 'Hello World!', 1) To add a new cell next to it with centered text and go to the next line, we would do: pdf.cell(60, 10, 'Powered by FPDF.', 0, 1, 'C') Remark : the line break can also be done with ln . This method allows to specify in addition the height of the break. Finally, the document is closed and sent to the browser with output . We could have saved it in a file by passing the desired file name. Caution : in case when the PDF is sent to the browser, nothing else must be output, not before nor after (the least space or carriage return matters). If you send some data before, you will get the error message: \"Some data has already been output to browser, can't send PDF file\". If you send after, your browser may display a blank page. Header, footer, page break and image Here is a two page example with header, footer and logo: from fpdf import FPDF class PDF(FPDF): def header(self): # Logo self.image('logo_pb.png', 10, 8, 33) # Arial bold 15 self.set_font('Arial', 'B', 15) # Move to the right self.cell(80) # Title self.cell(30, 10, 'Title', 1, 0, 'C') # Line break self.ln(20) # Page footer def footer(self): # Position at 1.5 cm from bottom self.set_y(-15) # Arial italic 8 self.set_font('Arial', 'I', 8) # Page number self.cell(0, 10, 'Page ' + str(self.page_no()) + '/{nb}', 0, 0, 'C') # Instantiation of inherited class pdf = PDF() pdf.alias_nb_pages() pdf.add_page() pdf.set_font('Times', '', 12) for i in range(1, 41): pdf.cell(0, 10, 'Printing line number ' + str(i), 0, 1) pdf.output('tuto2.pdf', 'F') Demo This example makes use of the header and footer methods to process page headers and footers. They are called automatically. They already exist in the FPDF class but do nothing, therefore we have to extend the class and override them. The logo is printed with the image method by specifying its upper-left corner and its width. The height is calculated automatically to respect the image proportions. To print the page number, a null value is passed as the cell width. It means that the cell should extend up to the right margin of the page; it is handy to center text. The current page number is returned by the page_no method; as for the total number of pages, it is obtained by means of the special value {nb} which will be substituted on document closure (provided you first called alias_nb_pages ). Note the use of the set_y method which allows to set position at an absolute location in the page, starting from the top or the bottom. Another interesting feature is used here: the automatic page breaking. As soon as a cell would cross a limit in the page (at 2 centimeters from the bottom by default), a break is performed and the font restored. Although the header and footer select their own font ( Arial ), the body continues with Times . This mechanism of automatic restoration also applies to colors and line width. The limit which triggers page breaks can be set with set_auto_page_break . Line breaks and colors Let's continue with an example which prints justified paragraphs. It also illustrates the use of colors. from fpdf import FPDF title = '20000 Leagues Under the Seas' class PDF(FPDF): def header(self): # Arial bold 15 self.set_font('Arial', 'B', 15) # Calculate width of title and position w = self.get_string_width(title) + 6 self.set_x((210 - w) / 2) # Colors of frame, background and text self.set_draw_color(0, 80, 180) self.set_fill_color(230, 230, 0) self.set_text_color(220, 50, 50) # Thickness of frame (1 mm) self.set_line_width(1) # Title self.cell(w, 9, title, 1, 1, 'C', 1) # Line break self.ln(10) def footer(self): # Position at 1.5 cm from bottom self.set_y(-15) # Arial italic 8 self.set_font('Arial', 'I', 8) # Text color in gray self.set_text_color(128) # Page number self.cell(0, 10, 'Page ' + str(self.page_no()), 0, 0, 'C') def chapter_title(self, num, label): # Arial 12 self.set_font('Arial', '', 12) # Background color self.set_fill_color(200, 220, 255) # Title self.cell(0, 6, 'Chapter %d : %s' % (num, label), 0, 1, 'L', 1) # Line break self.ln(4) def chapter_body(self, name): # Read text file with open(name, 'rb') as fh: txt = fh.read().decode('latin-1') # Times 12 self.set_font('Times', '', 12) # Output justified text self.multi_cell(0, 5, txt) # Line break self.ln() # Mention in italics self.set_font('', 'I') self.cell(0, 5, '(end of excerpt)') def print_chapter(self, num, title, name): self.add_page() self.chapter_title(num, title) self.chapter_body(name) pdf = PDF() pdf.set_title(title) pdf.set_author('Jules Verne') pdf.print_chapter(1, 'A RUNAWAY REEF', '20k_c1.txt') pdf.print_chapter(2, 'THE PROS AND CONS', '20k_c2.txt') pdf.output('tuto3.pdf', 'F') Demo The get_string_width method allows determining the length of a string in the current font, which is used here to calculate the position and the width of the frame surrounding the title. Then colors are set (via set_draw_color , set_fill_color and set_text_color ) and the thickness of the line is set to 1 mm (against 0.2 by default) with set_line_width . Finally, we output the cell (the last parameter to true indicates that the background must be filled). The method used to print the paragraphs is multi_cell . Each time a line reaches the right extremity of the cell or a carriage return character is met, a line break is issued and a new cell automatically created under the current one. Text is justified by default. Two document properties are defined: the title ( set_title ) and the author ( set_author ). Properties can be viewed by two means. First is to open the document directly with Acrobat Reader, go to the File menu and choose the Document Properties option. The second, also available from the plug-in, is to right-click and select Document Properties. Installation Notes Previously, to import the object you should use the pyfpdf package: from pyfpdf import FPDF After version 1.7, to import it you should use the fpdf package: from fpdf import FPDF","title":"Tutorial"},{"location":"Tutorial.html#tutorial","text":"Espa\u00f1ol: Tutorial-es Tutorial Minimal Example Header, footer, page break and image Line breaks and colors Installation Notes","title":"Tutorial"},{"location":"Tutorial.html#minimal-example","text":"Let's start with the classic example: from fpdf import FPDF pdf = FPDF() pdf.add_page() pdf.set_font('Arial', 'B', 16) pdf.cell(40, 10, 'Hello World!') pdf.output('tuto1.pdf', 'F') Demo After including the library file, we create an FPDF object. The FPDF constructor is used here with the default values: pages are in A4 portrait and the measure unit is millimeter. It could have been specified explicitly with: pdf = FPDF('P', 'mm', 'A4') It is possible to use landscape ( L ), other page formats (such as Letter and Legal ) and measure units ( pt , cm , in ). There is no page for the moment, so we have to add one with add_page . The origin is at the upper-left corner and the current position is by default placed at 1 cm from the borders; the margins can be changed with set_margins . Before we can print text, it is mandatory to select a font with set_font , otherwise the document would be invalid. We choose Arial bold 16: pdf.set_font('Arial', 'B', 16) We could have specified italics with I , underlined with U or a regular font with an empty string (or any combination). Note that the font size is given in points, not millimeters (or another user unit); it is the only exception. The other standard fonts are Times , Courier , Symbol and ZapfDingbats . We can now print a cell with cell . A cell is a rectangular area, possibly framed, which contains some text. It is output at the current position. We specify its dimensions, its text (centered or aligned), if borders should be drawn, and where the current position moves after it (to the right, below or to the beginning of the next line). To add a frame, we would do this: pdf.cell(40, 10, 'Hello World!', 1) To add a new cell next to it with centered text and go to the next line, we would do: pdf.cell(60, 10, 'Powered by FPDF.', 0, 1, 'C') Remark : the line break can also be done with ln . This method allows to specify in addition the height of the break. Finally, the document is closed and sent to the browser with output . We could have saved it in a file by passing the desired file name. Caution : in case when the PDF is sent to the browser, nothing else must be output, not before nor after (the least space or carriage return matters). If you send some data before, you will get the error message: \"Some data has already been output to browser, can't send PDF file\". If you send after, your browser may display a blank page.","title":"Minimal Example"},{"location":"Tutorial.html#header-footer-page-break-and-image","text":"Here is a two page example with header, footer and logo: from fpdf import FPDF class PDF(FPDF): def header(self): # Logo self.image('logo_pb.png', 10, 8, 33) # Arial bold 15 self.set_font('Arial', 'B', 15) # Move to the right self.cell(80) # Title self.cell(30, 10, 'Title', 1, 0, 'C') # Line break self.ln(20) # Page footer def footer(self): # Position at 1.5 cm from bottom self.set_y(-15) # Arial italic 8 self.set_font('Arial', 'I', 8) # Page number self.cell(0, 10, 'Page ' + str(self.page_no()) + '/{nb}', 0, 0, 'C') # Instantiation of inherited class pdf = PDF() pdf.alias_nb_pages() pdf.add_page() pdf.set_font('Times', '', 12) for i in range(1, 41): pdf.cell(0, 10, 'Printing line number ' + str(i), 0, 1) pdf.output('tuto2.pdf', 'F') Demo This example makes use of the header and footer methods to process page headers and footers. They are called automatically. They already exist in the FPDF class but do nothing, therefore we have to extend the class and override them. The logo is printed with the image method by specifying its upper-left corner and its width. The height is calculated automatically to respect the image proportions. To print the page number, a null value is passed as the cell width. It means that the cell should extend up to the right margin of the page; it is handy to center text. The current page number is returned by the page_no method; as for the total number of pages, it is obtained by means of the special value {nb} which will be substituted on document closure (provided you first called alias_nb_pages ). Note the use of the set_y method which allows to set position at an absolute location in the page, starting from the top or the bottom. Another interesting feature is used here: the automatic page breaking. As soon as a cell would cross a limit in the page (at 2 centimeters from the bottom by default), a break is performed and the font restored. Although the header and footer select their own font ( Arial ), the body continues with Times . This mechanism of automatic restoration also applies to colors and line width. The limit which triggers page breaks can be set with set_auto_page_break .","title":"Header, footer, page break and image"},{"location":"Tutorial.html#line-breaks-and-colors","text":"Let's continue with an example which prints justified paragraphs. It also illustrates the use of colors. from fpdf import FPDF title = '20000 Leagues Under the Seas' class PDF(FPDF): def header(self): # Arial bold 15 self.set_font('Arial', 'B', 15) # Calculate width of title and position w = self.get_string_width(title) + 6 self.set_x((210 - w) / 2) # Colors of frame, background and text self.set_draw_color(0, 80, 180) self.set_fill_color(230, 230, 0) self.set_text_color(220, 50, 50) # Thickness of frame (1 mm) self.set_line_width(1) # Title self.cell(w, 9, title, 1, 1, 'C', 1) # Line break self.ln(10) def footer(self): # Position at 1.5 cm from bottom self.set_y(-15) # Arial italic 8 self.set_font('Arial', 'I', 8) # Text color in gray self.set_text_color(128) # Page number self.cell(0, 10, 'Page ' + str(self.page_no()), 0, 0, 'C') def chapter_title(self, num, label): # Arial 12 self.set_font('Arial', '', 12) # Background color self.set_fill_color(200, 220, 255) # Title self.cell(0, 6, 'Chapter %d : %s' % (num, label), 0, 1, 'L', 1) # Line break self.ln(4) def chapter_body(self, name): # Read text file with open(name, 'rb') as fh: txt = fh.read().decode('latin-1') # Times 12 self.set_font('Times', '', 12) # Output justified text self.multi_cell(0, 5, txt) # Line break self.ln() # Mention in italics self.set_font('', 'I') self.cell(0, 5, '(end of excerpt)') def print_chapter(self, num, title, name): self.add_page() self.chapter_title(num, title) self.chapter_body(name) pdf = PDF() pdf.set_title(title) pdf.set_author('Jules Verne') pdf.print_chapter(1, 'A RUNAWAY REEF', '20k_c1.txt') pdf.print_chapter(2, 'THE PROS AND CONS', '20k_c2.txt') pdf.output('tuto3.pdf', 'F') Demo The get_string_width method allows determining the length of a string in the current font, which is used here to calculate the position and the width of the frame surrounding the title. Then colors are set (via set_draw_color , set_fill_color and set_text_color ) and the thickness of the line is set to 1 mm (against 0.2 by default) with set_line_width . Finally, we output the cell (the last parameter to true indicates that the background must be filled). The method used to print the paragraphs is multi_cell . Each time a line reaches the right extremity of the cell or a carriage return character is met, a line break is issued and a new cell automatically created under the current one. Text is justified by default. Two document properties are defined: the title ( set_title ) and the author ( set_author ). Properties can be viewed by two means. First is to open the document directly with Acrobat Reader, go to the File menu and choose the Document Properties option. The second, also available from the plug-in, is to right-click and select Document Properties.","title":"Line breaks and colors"},{"location":"Tutorial.html#installation-notes","text":"Previously, to import the object you should use the pyfpdf package: from pyfpdf import FPDF After version 1.7, to import it you should use the fpdf package: from fpdf import FPDF","title":"Installation Notes"},{"location":"Unicode.html","text":"Introduction Introduction Example Metric Files Free Font Pack and Copyright Restrictions The FPDF class was modified adding UTF-8 support. Moreover, it embeds only the necessary parts of the fonts that are used in the document, making the file size much smaller than if the whole fonts were embedded. These features were originally developed for the mPDF project, and ported from Ian Back 's sFPDF LGPL PHP version. Before you can use UTF-8, you have to install at least one Unicode font in the font directory (or system font folder). Some free font packages are available for download (extract them into the font folder): DejaVu family: Sans, Sans Condensed, Serif, Serif Condensed, Sans Mono (Supports more than 200 languages) GNU FreeFont family: FreeSans, FreeSerif, FreeMono Indic (ttf-indic-fonts Debian and Ubuntu package) for Bengali, Devanagari, Gujarati, Gurmukhi (including the variants for Punjabi), Kannada, Malayalam, Oriya, Tamil, Telugu, Tibetan AR PL New Sung (firefly): The Open Source Chinese Font (also supports other east Asian languages) Alee (ttf-alee Arch Linux package): General purpose Hangul Truetype fonts that contain Korean syllable and Latin9 (iso8859-15) characters. Fonts-TLWG (formerly ThaiFonts-Scalable) These fonts are included with this library's installers; see Free Font Pack for FPDF below for more information. Then, to use a Unicode font in your script, pass True as the fourth parameter of add_font . Example This example uses several free fonts to display some Unicode strings. Be sure to install the fonts in the font directory first. #!/usr/bin/env python # -*- coding: utf8 -*- from fpdf import FPDF pdf = FPDF() pdf.add_page() # Add a DejaVu Unicode font (uses UTF-8) # Supports more than 200 languages. For a coverage status see: # http://dejavu.svn.sourceforge.net/viewvc/dejavu/trunk/dejavu-fonts/langcover.txt pdf.add_font('DejaVu', '', 'DejaVuSansCondensed.ttf', uni=True) pdf.set_font('DejaVu', '', 14) text = u\"\"\" English: Hello World Greek: \u0393\u03b5\u03b9\u03ac \u03c3\u03bf\u03c5 \u03ba\u03cc\u03c3\u03bc\u03bf\u03c2 Polish: Witaj \u015bwiecie Portuguese: Ol\u00e1 mundo Russian: \u0417\u0434\u0440\u0430\u0432\u0441\u0442\u0432\u0443\u0439, \u041c\u0438\u0440 Vietnamese: Xin ch\u00e0o th\u1ebf gi\u1edbi Arabic: \u0645\u0631\u062d\u0628\u0627 \u0627\u0644\u0639\u0627\u0644\u0645 Hebrew: \u05e9\u05dc\u05d5\u05dd \u05e2\u05d5\u05dc\u05dd \"\"\" for txt in text.split('\\n'): pdf.write(8, txt) pdf.ln(8) # Add a Indic Unicode font (uses UTF-8) # Supports: Bengali, Devanagari, Gujarati, # Gurmukhi (including the variants for Punjabi) # Kannada, Malayalam, Oriya, Tamil, Telugu, Tibetan pdf.add_font('gargi', '', 'gargi.ttf', uni=True) pdf.set_font('gargi', '', 14) pdf.write(8, u'Hindi: \u0928\u092e\u0938\u094d\u0924\u0947 \u0926\u0941\u0928\u093f\u092f\u093e') pdf.ln(20) # Add a AR PL New Sung Unicode font (uses UTF-8) # The Open Source Chinese Font (also supports other east Asian languages) pdf.add_font('fireflysung', '', 'fireflysung.ttf', uni=True) pdf.set_font('fireflysung', '', 14) pdf.write(8, u'Chinese: \u4f60\u597d\u4e16\u754c\\n') pdf.write(8, u'Japanese: \u3053\u3093\u306b\u3061\u306f\u4e16\u754c\\n') pdf.ln(10) # Add a Alee Unicode font (uses UTF-8) # General purpose Hangul truetype fonts that contain Korean syllable # and Latin9 (iso8859-15) characters. pdf.add_font('eunjin', '', 'Eunjin.ttf', uni=True) pdf.set_font('eunjin', '', 14) pdf.write(8, u'Korean: \uc548\ub155\ud558\uc138\uc694') pdf.ln(20) # Add a Fonts-TLWG (formerly ThaiFonts-Scalable) (uses UTF-8) pdf.add_font('waree', '', 'Waree.ttf', uni=True) pdf.set_font('waree', '', 14) pdf.write(8, u'Thai: \u0e2a\u0e27\u0e31\u0e2a\u0e14\u0e35\u0e0a\u0e32\u0e27\u0e42\u0e25\u0e01') pdf.ln(20) # Select a standard font (uses windows-1252) pdf.set_font('Arial', '', 14) pdf.ln(10) pdf.write(5, 'This is standard built-in font') pdf.output(\"unicode.pdf\", 'F') View the result here: unicode.pdf Metric Files FPDF will try to automatically generate metrics (i.e. character widths) about TTF font files to speed up their processing. Such metrics are stored using the Python Pickle format ( .pkl extension), by default in the font directory (ensure read and write permission!). Additional information about the caching mechanism is defined in the add_font reference. TTF metric files often weigh about 650K, so keep that in mind if you use many TTF fonts and have disk size or memory limitations. By design, metric files are not imported as they could cause a temporary memory leak if not managed properly (this could be an issue in a webserver environment with many processes or threads, so the current implementation discards metrics when FPDF objects are disposed). In most circumstances, you will not notice any difference about storing metric files vs. generating them in each run on-the-fly (according basic tests, elapsed time is equivalent; YMMV). Like the original PHP implementation, this library should work even if it could not store the metric file, and as no source code file is generated at runtime, it should work in restricted environments. Free Font Pack and Copyright Restrictions For your convenience, this library collected 96 TTF files in an optional \"Free Unicode TrueType Font Pack for FPDF\" , with useful fonts commonly distributed with GNU/Linux operating systems (see above for a complete description). This pack is included in the Windows installers, or can be downloaded separately (for any operating system). You could use any TTF font file as long embedding usage is allowed in the licence. If not, a runtime exception will be raised saying: \"ERROR - Font file filename.ttf cannot be embedded due to copyright restrictions.\"","title":"Unicode"},{"location":"Unicode.html#introduction","text":"Introduction Example Metric Files Free Font Pack and Copyright Restrictions The FPDF class was modified adding UTF-8 support. Moreover, it embeds only the necessary parts of the fonts that are used in the document, making the file size much smaller than if the whole fonts were embedded. These features were originally developed for the mPDF project, and ported from Ian Back 's sFPDF LGPL PHP version. Before you can use UTF-8, you have to install at least one Unicode font in the font directory (or system font folder). Some free font packages are available for download (extract them into the font folder): DejaVu family: Sans, Sans Condensed, Serif, Serif Condensed, Sans Mono (Supports more than 200 languages) GNU FreeFont family: FreeSans, FreeSerif, FreeMono Indic (ttf-indic-fonts Debian and Ubuntu package) for Bengali, Devanagari, Gujarati, Gurmukhi (including the variants for Punjabi), Kannada, Malayalam, Oriya, Tamil, Telugu, Tibetan AR PL New Sung (firefly): The Open Source Chinese Font (also supports other east Asian languages) Alee (ttf-alee Arch Linux package): General purpose Hangul Truetype fonts that contain Korean syllable and Latin9 (iso8859-15) characters. Fonts-TLWG (formerly ThaiFonts-Scalable) These fonts are included with this library's installers; see Free Font Pack for FPDF below for more information. Then, to use a Unicode font in your script, pass True as the fourth parameter of add_font .","title":"Introduction"},{"location":"Unicode.html#example","text":"This example uses several free fonts to display some Unicode strings. Be sure to install the fonts in the font directory first. #!/usr/bin/env python # -*- coding: utf8 -*- from fpdf import FPDF pdf = FPDF() pdf.add_page() # Add a DejaVu Unicode font (uses UTF-8) # Supports more than 200 languages. For a coverage status see: # http://dejavu.svn.sourceforge.net/viewvc/dejavu/trunk/dejavu-fonts/langcover.txt pdf.add_font('DejaVu', '', 'DejaVuSansCondensed.ttf', uni=True) pdf.set_font('DejaVu', '', 14) text = u\"\"\" English: Hello World Greek: \u0393\u03b5\u03b9\u03ac \u03c3\u03bf\u03c5 \u03ba\u03cc\u03c3\u03bc\u03bf\u03c2 Polish: Witaj \u015bwiecie Portuguese: Ol\u00e1 mundo Russian: \u0417\u0434\u0440\u0430\u0432\u0441\u0442\u0432\u0443\u0439, \u041c\u0438\u0440 Vietnamese: Xin ch\u00e0o th\u1ebf gi\u1edbi Arabic: \u0645\u0631\u062d\u0628\u0627 \u0627\u0644\u0639\u0627\u0644\u0645 Hebrew: \u05e9\u05dc\u05d5\u05dd \u05e2\u05d5\u05dc\u05dd \"\"\" for txt in text.split('\\n'): pdf.write(8, txt) pdf.ln(8) # Add a Indic Unicode font (uses UTF-8) # Supports: Bengali, Devanagari, Gujarati, # Gurmukhi (including the variants for Punjabi) # Kannada, Malayalam, Oriya, Tamil, Telugu, Tibetan pdf.add_font('gargi', '', 'gargi.ttf', uni=True) pdf.set_font('gargi', '', 14) pdf.write(8, u'Hindi: \u0928\u092e\u0938\u094d\u0924\u0947 \u0926\u0941\u0928\u093f\u092f\u093e') pdf.ln(20) # Add a AR PL New Sung Unicode font (uses UTF-8) # The Open Source Chinese Font (also supports other east Asian languages) pdf.add_font('fireflysung', '', 'fireflysung.ttf', uni=True) pdf.set_font('fireflysung', '', 14) pdf.write(8, u'Chinese: \u4f60\u597d\u4e16\u754c\\n') pdf.write(8, u'Japanese: \u3053\u3093\u306b\u3061\u306f\u4e16\u754c\\n') pdf.ln(10) # Add a Alee Unicode font (uses UTF-8) # General purpose Hangul truetype fonts that contain Korean syllable # and Latin9 (iso8859-15) characters. pdf.add_font('eunjin', '', 'Eunjin.ttf', uni=True) pdf.set_font('eunjin', '', 14) pdf.write(8, u'Korean: \uc548\ub155\ud558\uc138\uc694') pdf.ln(20) # Add a Fonts-TLWG (formerly ThaiFonts-Scalable) (uses UTF-8) pdf.add_font('waree', '', 'Waree.ttf', uni=True) pdf.set_font('waree', '', 14) pdf.write(8, u'Thai: \u0e2a\u0e27\u0e31\u0e2a\u0e14\u0e35\u0e0a\u0e32\u0e27\u0e42\u0e25\u0e01') pdf.ln(20) # Select a standard font (uses windows-1252) pdf.set_font('Arial', '', 14) pdf.ln(10) pdf.write(5, 'This is standard built-in font') pdf.output(\"unicode.pdf\", 'F') View the result here: unicode.pdf","title":"Example"},{"location":"Unicode.html#metric-files","text":"FPDF will try to automatically generate metrics (i.e. character widths) about TTF font files to speed up their processing. Such metrics are stored using the Python Pickle format ( .pkl extension), by default in the font directory (ensure read and write permission!). Additional information about the caching mechanism is defined in the add_font reference. TTF metric files often weigh about 650K, so keep that in mind if you use many TTF fonts and have disk size or memory limitations. By design, metric files are not imported as they could cause a temporary memory leak if not managed properly (this could be an issue in a webserver environment with many processes or threads, so the current implementation discards metrics when FPDF objects are disposed). In most circumstances, you will not notice any difference about storing metric files vs. generating them in each run on-the-fly (according basic tests, elapsed time is equivalent; YMMV). Like the original PHP implementation, this library should work even if it could not store the metric file, and as no source code file is generated at runtime, it should work in restricted environments.","title":"Metric Files"},{"location":"Unicode.html#free-font-pack-and-copyright-restrictions","text":"For your convenience, this library collected 96 TTF files in an optional \"Free Unicode TrueType Font Pack for FPDF\" , with useful fonts commonly distributed with GNU/Linux operating systems (see above for a complete description). This pack is included in the Windows installers, or can be downloaded separately (for any operating system). You could use any TTF font file as long embedding usage is allowed in the licence. If not, a runtime exception will be raised saying: \"ERROR - Font file filename.ttf cannot be embedded due to copyright restrictions.\"","title":"Free Font Pack and Copyright Restrictions"},{"location":"Web2Py.html","text":"Introduction If you use web2py , you can make complex reports that can be viewed in a browser, or downloaded as PDF (taking advantage of web2py HTML helper objects to easily diagram a report). See write_html for more information, supported tags and attributes, etc. Also, using web2py DAL, you can easily set up a templating engine for PDF documents. See Templates for more information. The following examples are packaged in a ready to run application: web2py.app.fpdf.w2p . PyFPDF is included in web2py since release 1.85.2 . Also, you can download the latest version of pyfpdf and uncompress it in the web2py, gluon, contrib folder. Note about images : these sample images are small so they may look like low quality ones. For better results, use bigger images: more DPI (screen is often 72/96DPI, printers are often 300/600DPI). As a rule of thumb, use at least half of the image size when rendering to PDF, ie. if an image is 500x200px, use 250x100px as width and height attributes of the IMG tag. Sample Report You could make a \"professional looking\" bussiness report just using web2py HTML helpers, mixin headers, logos, charts, text and tables. The main advantage of this method is that the same report can be rendered in a HTML view, or can be downloaded as PDF, with a minimal effort: Sample: report.pdf Updated Live Demo (HTML and PDF version): http://www.web2py.com.ar/fpdf/default/report http://www.web2py.com.ar/fpdf/default/report.pdf def report(): response.title = \"web2py sample report\" # include a google chart (download it dynamically!) url = \"http://chart.apis.google.com/chart?cht=p3&chd=t:60,40&chs=500x200&chl=Hello|World&.png\" chart = IMG(_src=url, _width=\"250\", _height=\"100\") # create a small table with some data: rows = [THEAD(TR(TH(\"Key\", _width=\"70%\"), TH(\"Value\", _width=\"30%\"))), TBODY(TR(TD(\"Hello\"), TD(\"60\")), TR(TD(\"World\"), TD(\"40\")))] table = TABLE(*rows, _border=\"0\", _align=\"center\", _width=\"50%\") if request.extension == \"pdf\": from gluon.contrib.pyfpdf import FPDF, HTMLMixin # create a custom class with the required functionality class MyFPDF(FPDF, HTMLMixin): def header(self): \"hook to draw custom page header (logo and title)\" logo = os.path.join(request.env.web2py_path, \"gluon\", \"contrib\", \"pyfpdf\", \"tutorial\", \"logo_pb.png\") self.image(logo, 10, 8, 33) self.set_font('Arial', 'B', 15) self.cell(65) # padding self.cell(60, 10, response.title, 1, 0, 'C') self.ln(20) def footer(self): \"hook to draw custom page footer (printing page numbers)\" self.set_y(-15) self.set_font('Arial', 'I', 8) txt = 'Page %s of %s' % (self.page_no(), self.alias_nb_pages()) self.cell(0, 10, txt, 0, 0, 'C') pdf = MyFPDF() # create a page and serialize/render HTML objects pdf.add_page() pdf.write_html(str(XML(table, sanitize=False))) pdf.write_html(str(XML(CENTER(chart), sanitize=False))) # prepare PDF to download: response.headers['Content-Type'] = 'application/pdf' return pdf.output(dest='S') else: # normal html view: return dict(chart=chart, table=table) Sample Table Listing Also, you can make nice tables that automatically spreads over several pages, with headers and footers, column and row highlighting, etc., in a very pythonic way: Sample: listing.pdf Updated Live Demo (HTML and PDF version): http://www.web2py.com.ar/fpdf/default/listing http://www.web2py.com.ar/fpdf/default/listing.pdf def listing(): response.title = \"web2py sample listing\" # define header and footers: head = THEAD(TR(TH(\"Header 1\", _width=\"50%\"), TH(\"Header 2\", _width=\"30%\"), TH(\"Header 3\", _width=\"20%\"), _bgcolor=\"#A0A0A0\")) foot = TFOOT(TR(TH(\"Footer 1\", _width=\"50%\"), TH(\"Footer 2\", _width=\"30%\"), TH(\"Footer 3\", _width=\"20%\"), _bgcolor=\"#E0E0E0\")) # create several rows: rows = [] for i in range(1000): col = i % 2 and \"#F0F0F0\" or \"#FFFFFF\" rows.append(TR(TD(\"Row %s\" %i), TD(\"something\", _align=\"center\"), TD(\"%s\" % i, _align=\"right\"), _bgcolor=col)) # make the table object body = TBODY(*rows) table = TABLE(*[head, foot, body], _border=\"1\", _align=\"center\", _width=\"100%\") if request.extension == \"pdf\": from gluon.contrib.pyfpdf import FPDF, HTMLMixin # define our FPDF class (move to modules if it is reused frequently) class MyFPDF(FPDF, HTMLMixin): def header(self): self.set_font('Arial', 'B', 15) self.cell(0, 10, response.title, 1, 0, 'C') self.ln(20) def footer(self): self.set_y(-15) self.set_font('Arial', 'I', 8) txt = 'Page %s of %s' % (self.page_no(), self.alias_nb_pages()) self.cell(0, 10, txt, 0, 0, 'C') pdf = MyFPDF() # first page: pdf.add_page() pdf.write_html(str(XML(table, sanitize=False))) response.headers['Content-Type'] = 'application/pdf' return pdf.output(dest='S') else: # normal html view: return dict(table=table)}}} Samples Template Definitions As stated in the Templates page, there are 3 ways of putting your templates in place. As in that page there are samples for the manually hardcoded way and CSV document loading. Here we will only show a sample of the template engine. Sample Templating Engine PyFPDF and web2py can be used to make PDF documents using templates like invoices, badges, certificates, etc.: Sample: invoice.pdf Updated Live Demo: http://www.web2py.com.ar/fpdf/default/invoice.pdf To handle multiple templates, we can define two tables in web2py: pdf_template: general document information (name, paper size, etc.) pdf_element: several rows for each document, describing graphics primitives and placeholders. In db.py write: db.define_table(\"pdf_template\", Field(\"pdf_template_id\", \"id\"), Field(\"title\"), Field(\"format\", requires=IS_IN_SET([\"A4\", \"legal\", \"letter\"])), ) db.define_table(\"pdf_element\", Field(\"pdf_template_id\", db.pdf_template, requires=IS_IN_DB(db, 'pdf_template.pdf_template_id', 'pdf_template.title')), Field(\"name\", requires=IS_NOT_EMPTY()), Field(\"type\", length=2, requires=IS_IN_SET(['T', 'L', 'I', 'B', 'BC'])), Field(\"x1\", \"double\", requires=IS_NOT_EMPTY()), Field(\"y1\", \"double\", requires=IS_NOT_EMPTY()), Field(\"x2\", \"double\", requires=IS_NOT_EMPTY()), Field(\"y2\", \"double\", requires=IS_NOT_EMPTY()), Field(\"font\", default=\"Arial\", requires=IS_IN_SET(['Courier', 'Arial', 'Times', 'Symbol', 'Zapfdingbats'])), Field(\"size\", \"double\", default=\"10\", requires=IS_NOT_EMPTY()), Field(\"bold\", \"boolean\"), Field(\"italic\", \"boolean\"), Field(\"underline\", \"boolean\"), Field(\"foreground\", \"integer\", default=0x000000, comment=\"Color text\"), Field(\"background\", \"integer\", default=0xFFFFFF, comment=\"Fill color\"), Field(\"align\", \"string\", length=1, default=\"L\", requires=IS_IN_SET(['L', 'R', 'C', 'J'])), Field(\"text\", \"text\", comment=\"Default text\"), Field(\"priority\", \"integer\", default=0, comment=\"Z-Order\"), ) Warning : the fields \"type\", \"size\" and \"text\" are reserved words for some DB engines, so validation: db = DAL('sqlite://storage.sqlite', pool_size=1, check_reserved=['ALL']) will fail. sqlite, MySQL and postgres work OK. Proposals for new naming ideas are welcome. At this point you could go to web2py AppAdmin and start to define your document templates, or use import/export functions to reuse your already defined formats! Note: if you used designer.py to create the templates, and you want to import the templates with the Web2Py database admin, you will have to modify the file. So, designer.py outputs a file like this: line0;T;20.0;13.0;190.0;13.0;times;10.0;0;0;0;0;65535;C;;0 line1;T;20.0;67.0;190.0;67.0;times;10.0;0;0;0;0;65535;C;;0 name0;T;21;14;104;25;times;16.0;0;0;0;0;0;C;;2 title0;T;64;26;104;30;times;10.0;0;0;0;0;0;C;;2 You will have to make it look lke this: pdf_element.pdf_template_id, pdf_element.name, pdf_element.type, pdf_element.x1, pdf_element.y1, pdf_element.x2, pdf_element.y2, pdf_element.font, pdf_element.size, pdf_element.bold, pdf_element.italic, pdf_element.underline, pdf_element.foreground, pdf_element.background, pdf_element.align, pdf_element.text, pdf_element.priority 1,line0,T,20.0,283.0,190.0,283.0,times,10.0,0,0,0,0,65535,C,,0 1,line1,T,20.0,337.0,190.0,337.0,times,10.0,0,0,0,0,65535,C,,0 1,name0,T,21,14,104,25,times,16.0,0,0,0,0,0,C,,2 1,title0,T,64,26,104,30,times,10.0,0,0,0,0,0,C,,2 Where the first number indicates the template ID (important for the database system), and the first line indicates the database fields to fill. A simple Python script should do the trick. After defining and filling your database, you can use PyFPDF Templates directly reading row elements from the web2py database: For example, for an invoice, in a controller you could write: def invoice(): from gluon.contrib.pyfpdf import Template import os.path # generate sample invoice (according Argentina's regulations) import random from decimal import Decimal # read elements from db elements = db(db.pdf_element.pdf_template_id == 1).select(orderby=db.pdf_element.priority) f = Template(format=\"A4\", elements = elements, title=\"Sample Invoice\", author=\"Sample Company\", subject=\"Sample Customer\", keywords=\"Electronic TAX Invoice\") # create some random invoice line items and detail data detail = \"Lorem ipsum dolor sit amet, consectetur. \" * 5 items = [] for i in range(1, 30): ds = \"Sample product %s\" % i qty = random.randint(1, 10) price = round(random.random() * 100, 3) code = \"%s%s%02d\" % (chr(random.randint(65, 90)), chr(random.randint(65, 90)), i) items.append(dict(code=code, unit='u', qty=qty, price=price, amount=qty * price, ds=\"%s: %s\" % (i, ds))) # divide and count lines lines = 0 li_items = [] for it in items: qty = it['qty'] code = it['code'] unit = it['unit'] for ds in f.split_multicell(it['ds'], 'item_description01'): # add item description line (without price nor amount) li_items.append(dict(code=code, ds=ds, qty=qty, unit=unit, price=None, amount=None)) # clean qty and code (show only at first) unit = qty = code = None # set last item line price and amount li_items[-1].update(amount = it['amount'], price = it['price']) # split detail into each line description obs=\"\\n<U>Detail:</U>\\n\\n\" + detail for ds in f.split_multicell(obs, 'item_description01'): li_items.append(dict(code=code, ds=ds, qty=qty, unit=unit, price=None, amount=None)) # calculate pages: lines = len(li_items) max_lines_per_page = 24 pages = lines / (max_lines_per_page - 1) if lines % (max_lines_per_page - 1): pages = pages + 1 # fill placeholders for each page for page in range(1, pages + 1): f.add_page() f['page'] = 'Page %s of %s' % (page, pages) if pages > 1 and page < pages: s = 'Continues on page %s' % (page + 1) else: s = '' f['item_description%02d' % (max_lines_per_page + 1)] = s f[\"company_name\"] = \"Sample Company\" f[\"company_logo\"] = os.path.join(request.env.web2py_path, \"gluon\", \"contrib\", \"pyfpdf\", \"tutorial\", \"logo.png\") f[\"company_header1\"] = \"Some Address - somewhere -\" f[\"company_header2\"] = \"http://www.example.com\" f[\"company_footer1\"] = \"Tax Code ...\" f[\"company_footer2\"] = \"Tax/VAT ID ...\" f['number'] = '0001-00001234' f['issue_date'] = '2010-09-10' f['due_date'] = '2099-09-10' f['customer_name'] = \"Sample Client\" f['customer_address'] = \"Siempreviva 1234\" # print line item... li = 0 k = 0 total = Decimal(\"0.00\") for it in li_items: k = k + 1 if k > page * (max_lines_per_page - 1): break if it['amount']: total += Decimal(\"%.6f\" % it['amount']) if k > (page - 1) * (max_lines_per_page - 1): li += 1 if it['qty'] is not None: f['item_quantity%02d' % li] = it['qty'] if it['code'] is not None: f['item_code%02d' % li] = it['code'] if it['unit'] is not None: f['item_unit%02d' % li] = it['unit'] f['item_description%02d' % li] = it['ds'] if it['price'] is not None: f['item_price%02d' % li] = \"%0.3f\" % it['price'] if it['amount'] is not None: f['item_amount%02d' % li] = \"%0.2f\" % it['amount'] # last page? print totals: if pages == page: f['net'] = \"%0.2f\" % (total / Decimal(\"1.21\")) f['vat'] = \"%0.2f\" % (total * (1 - 1 / Decimal(\"1.21\"))) f['total_label'] = 'Total:' else: f['total_label'] = 'SubTotal:' f['total'] = \"%0.2f\" % total response.headers['Content-Type'] = 'application/pdf' return f.render('invoice.pdf', dest='S') Of course, this is a hardcoded example. You can use the database to store invoices or any other data; there is no rigid class hierachy to follow, just fill your template like a dict!","title":"Introduction #"},{"location":"Web2Py.html#introduction","text":"If you use web2py , you can make complex reports that can be viewed in a browser, or downloaded as PDF (taking advantage of web2py HTML helper objects to easily diagram a report). See write_html for more information, supported tags and attributes, etc. Also, using web2py DAL, you can easily set up a templating engine for PDF documents. See Templates for more information. The following examples are packaged in a ready to run application: web2py.app.fpdf.w2p . PyFPDF is included in web2py since release 1.85.2 . Also, you can download the latest version of pyfpdf and uncompress it in the web2py, gluon, contrib folder. Note about images : these sample images are small so they may look like low quality ones. For better results, use bigger images: more DPI (screen is often 72/96DPI, printers are often 300/600DPI). As a rule of thumb, use at least half of the image size when rendering to PDF, ie. if an image is 500x200px, use 250x100px as width and height attributes of the IMG tag.","title":"Introduction"},{"location":"Web2Py.html#sample-report","text":"You could make a \"professional looking\" bussiness report just using web2py HTML helpers, mixin headers, logos, charts, text and tables. The main advantage of this method is that the same report can be rendered in a HTML view, or can be downloaded as PDF, with a minimal effort: Sample: report.pdf Updated Live Demo (HTML and PDF version): http://www.web2py.com.ar/fpdf/default/report http://www.web2py.com.ar/fpdf/default/report.pdf def report(): response.title = \"web2py sample report\" # include a google chart (download it dynamically!) url = \"http://chart.apis.google.com/chart?cht=p3&chd=t:60,40&chs=500x200&chl=Hello|World&.png\" chart = IMG(_src=url, _width=\"250\", _height=\"100\") # create a small table with some data: rows = [THEAD(TR(TH(\"Key\", _width=\"70%\"), TH(\"Value\", _width=\"30%\"))), TBODY(TR(TD(\"Hello\"), TD(\"60\")), TR(TD(\"World\"), TD(\"40\")))] table = TABLE(*rows, _border=\"0\", _align=\"center\", _width=\"50%\") if request.extension == \"pdf\": from gluon.contrib.pyfpdf import FPDF, HTMLMixin # create a custom class with the required functionality class MyFPDF(FPDF, HTMLMixin): def header(self): \"hook to draw custom page header (logo and title)\" logo = os.path.join(request.env.web2py_path, \"gluon\", \"contrib\", \"pyfpdf\", \"tutorial\", \"logo_pb.png\") self.image(logo, 10, 8, 33) self.set_font('Arial', 'B', 15) self.cell(65) # padding self.cell(60, 10, response.title, 1, 0, 'C') self.ln(20) def footer(self): \"hook to draw custom page footer (printing page numbers)\" self.set_y(-15) self.set_font('Arial', 'I', 8) txt = 'Page %s of %s' % (self.page_no(), self.alias_nb_pages()) self.cell(0, 10, txt, 0, 0, 'C') pdf = MyFPDF() # create a page and serialize/render HTML objects pdf.add_page() pdf.write_html(str(XML(table, sanitize=False))) pdf.write_html(str(XML(CENTER(chart), sanitize=False))) # prepare PDF to download: response.headers['Content-Type'] = 'application/pdf' return pdf.output(dest='S') else: # normal html view: return dict(chart=chart, table=table)","title":"Sample Report"},{"location":"Web2Py.html#sample-table-listing","text":"Also, you can make nice tables that automatically spreads over several pages, with headers and footers, column and row highlighting, etc., in a very pythonic way: Sample: listing.pdf Updated Live Demo (HTML and PDF version): http://www.web2py.com.ar/fpdf/default/listing http://www.web2py.com.ar/fpdf/default/listing.pdf def listing(): response.title = \"web2py sample listing\" # define header and footers: head = THEAD(TR(TH(\"Header 1\", _width=\"50%\"), TH(\"Header 2\", _width=\"30%\"), TH(\"Header 3\", _width=\"20%\"), _bgcolor=\"#A0A0A0\")) foot = TFOOT(TR(TH(\"Footer 1\", _width=\"50%\"), TH(\"Footer 2\", _width=\"30%\"), TH(\"Footer 3\", _width=\"20%\"), _bgcolor=\"#E0E0E0\")) # create several rows: rows = [] for i in range(1000): col = i % 2 and \"#F0F0F0\" or \"#FFFFFF\" rows.append(TR(TD(\"Row %s\" %i), TD(\"something\", _align=\"center\"), TD(\"%s\" % i, _align=\"right\"), _bgcolor=col)) # make the table object body = TBODY(*rows) table = TABLE(*[head, foot, body], _border=\"1\", _align=\"center\", _width=\"100%\") if request.extension == \"pdf\": from gluon.contrib.pyfpdf import FPDF, HTMLMixin # define our FPDF class (move to modules if it is reused frequently) class MyFPDF(FPDF, HTMLMixin): def header(self): self.set_font('Arial', 'B', 15) self.cell(0, 10, response.title, 1, 0, 'C') self.ln(20) def footer(self): self.set_y(-15) self.set_font('Arial', 'I', 8) txt = 'Page %s of %s' % (self.page_no(), self.alias_nb_pages()) self.cell(0, 10, txt, 0, 0, 'C') pdf = MyFPDF() # first page: pdf.add_page() pdf.write_html(str(XML(table, sanitize=False))) response.headers['Content-Type'] = 'application/pdf' return pdf.output(dest='S') else: # normal html view: return dict(table=table)}}}","title":"Sample Table Listing"},{"location":"Web2Py.html#samples-template-definitions","text":"As stated in the Templates page, there are 3 ways of putting your templates in place. As in that page there are samples for the manually hardcoded way and CSV document loading. Here we will only show a sample of the template engine.","title":"Samples Template Definitions"},{"location":"Web2Py.html#sample-templating-engine","text":"PyFPDF and web2py can be used to make PDF documents using templates like invoices, badges, certificates, etc.: Sample: invoice.pdf Updated Live Demo: http://www.web2py.com.ar/fpdf/default/invoice.pdf To handle multiple templates, we can define two tables in web2py: pdf_template: general document information (name, paper size, etc.) pdf_element: several rows for each document, describing graphics primitives and placeholders. In db.py write: db.define_table(\"pdf_template\", Field(\"pdf_template_id\", \"id\"), Field(\"title\"), Field(\"format\", requires=IS_IN_SET([\"A4\", \"legal\", \"letter\"])), ) db.define_table(\"pdf_element\", Field(\"pdf_template_id\", db.pdf_template, requires=IS_IN_DB(db, 'pdf_template.pdf_template_id', 'pdf_template.title')), Field(\"name\", requires=IS_NOT_EMPTY()), Field(\"type\", length=2, requires=IS_IN_SET(['T', 'L', 'I', 'B', 'BC'])), Field(\"x1\", \"double\", requires=IS_NOT_EMPTY()), Field(\"y1\", \"double\", requires=IS_NOT_EMPTY()), Field(\"x2\", \"double\", requires=IS_NOT_EMPTY()), Field(\"y2\", \"double\", requires=IS_NOT_EMPTY()), Field(\"font\", default=\"Arial\", requires=IS_IN_SET(['Courier', 'Arial', 'Times', 'Symbol', 'Zapfdingbats'])), Field(\"size\", \"double\", default=\"10\", requires=IS_NOT_EMPTY()), Field(\"bold\", \"boolean\"), Field(\"italic\", \"boolean\"), Field(\"underline\", \"boolean\"), Field(\"foreground\", \"integer\", default=0x000000, comment=\"Color text\"), Field(\"background\", \"integer\", default=0xFFFFFF, comment=\"Fill color\"), Field(\"align\", \"string\", length=1, default=\"L\", requires=IS_IN_SET(['L', 'R', 'C', 'J'])), Field(\"text\", \"text\", comment=\"Default text\"), Field(\"priority\", \"integer\", default=0, comment=\"Z-Order\"), ) Warning : the fields \"type\", \"size\" and \"text\" are reserved words for some DB engines, so validation: db = DAL('sqlite://storage.sqlite', pool_size=1, check_reserved=['ALL']) will fail. sqlite, MySQL and postgres work OK. Proposals for new naming ideas are welcome. At this point you could go to web2py AppAdmin and start to define your document templates, or use import/export functions to reuse your already defined formats! Note: if you used designer.py to create the templates, and you want to import the templates with the Web2Py database admin, you will have to modify the file. So, designer.py outputs a file like this: line0;T;20.0;13.0;190.0;13.0;times;10.0;0;0;0;0;65535;C;;0 line1;T;20.0;67.0;190.0;67.0;times;10.0;0;0;0;0;65535;C;;0 name0;T;21;14;104;25;times;16.0;0;0;0;0;0;C;;2 title0;T;64;26;104;30;times;10.0;0;0;0;0;0;C;;2 You will have to make it look lke this: pdf_element.pdf_template_id, pdf_element.name, pdf_element.type, pdf_element.x1, pdf_element.y1, pdf_element.x2, pdf_element.y2, pdf_element.font, pdf_element.size, pdf_element.bold, pdf_element.italic, pdf_element.underline, pdf_element.foreground, pdf_element.background, pdf_element.align, pdf_element.text, pdf_element.priority 1,line0,T,20.0,283.0,190.0,283.0,times,10.0,0,0,0,0,65535,C,,0 1,line1,T,20.0,337.0,190.0,337.0,times,10.0,0,0,0,0,65535,C,,0 1,name0,T,21,14,104,25,times,16.0,0,0,0,0,0,C,,2 1,title0,T,64,26,104,30,times,10.0,0,0,0,0,0,C,,2 Where the first number indicates the template ID (important for the database system), and the first line indicates the database fields to fill. A simple Python script should do the trick. After defining and filling your database, you can use PyFPDF Templates directly reading row elements from the web2py database: For example, for an invoice, in a controller you could write: def invoice(): from gluon.contrib.pyfpdf import Template import os.path # generate sample invoice (according Argentina's regulations) import random from decimal import Decimal # read elements from db elements = db(db.pdf_element.pdf_template_id == 1).select(orderby=db.pdf_element.priority) f = Template(format=\"A4\", elements = elements, title=\"Sample Invoice\", author=\"Sample Company\", subject=\"Sample Customer\", keywords=\"Electronic TAX Invoice\") # create some random invoice line items and detail data detail = \"Lorem ipsum dolor sit amet, consectetur. \" * 5 items = [] for i in range(1, 30): ds = \"Sample product %s\" % i qty = random.randint(1, 10) price = round(random.random() * 100, 3) code = \"%s%s%02d\" % (chr(random.randint(65, 90)), chr(random.randint(65, 90)), i) items.append(dict(code=code, unit='u', qty=qty, price=price, amount=qty * price, ds=\"%s: %s\" % (i, ds))) # divide and count lines lines = 0 li_items = [] for it in items: qty = it['qty'] code = it['code'] unit = it['unit'] for ds in f.split_multicell(it['ds'], 'item_description01'): # add item description line (without price nor amount) li_items.append(dict(code=code, ds=ds, qty=qty, unit=unit, price=None, amount=None)) # clean qty and code (show only at first) unit = qty = code = None # set last item line price and amount li_items[-1].update(amount = it['amount'], price = it['price']) # split detail into each line description obs=\"\\n<U>Detail:</U>\\n\\n\" + detail for ds in f.split_multicell(obs, 'item_description01'): li_items.append(dict(code=code, ds=ds, qty=qty, unit=unit, price=None, amount=None)) # calculate pages: lines = len(li_items) max_lines_per_page = 24 pages = lines / (max_lines_per_page - 1) if lines % (max_lines_per_page - 1): pages = pages + 1 # fill placeholders for each page for page in range(1, pages + 1): f.add_page() f['page'] = 'Page %s of %s' % (page, pages) if pages > 1 and page < pages: s = 'Continues on page %s' % (page + 1) else: s = '' f['item_description%02d' % (max_lines_per_page + 1)] = s f[\"company_name\"] = \"Sample Company\" f[\"company_logo\"] = os.path.join(request.env.web2py_path, \"gluon\", \"contrib\", \"pyfpdf\", \"tutorial\", \"logo.png\") f[\"company_header1\"] = \"Some Address - somewhere -\" f[\"company_header2\"] = \"http://www.example.com\" f[\"company_footer1\"] = \"Tax Code ...\" f[\"company_footer2\"] = \"Tax/VAT ID ...\" f['number'] = '0001-00001234' f['issue_date'] = '2010-09-10' f['due_date'] = '2099-09-10' f['customer_name'] = \"Sample Client\" f['customer_address'] = \"Siempreviva 1234\" # print line item... li = 0 k = 0 total = Decimal(\"0.00\") for it in li_items: k = k + 1 if k > page * (max_lines_per_page - 1): break if it['amount']: total += Decimal(\"%.6f\" % it['amount']) if k > (page - 1) * (max_lines_per_page - 1): li += 1 if it['qty'] is not None: f['item_quantity%02d' % li] = it['qty'] if it['code'] is not None: f['item_code%02d' % li] = it['code'] if it['unit'] is not None: f['item_unit%02d' % li] = it['unit'] f['item_description%02d' % li] = it['ds'] if it['price'] is not None: f['item_price%02d' % li] = \"%0.3f\" % it['price'] if it['amount'] is not None: f['item_amount%02d' % li] = \"%0.2f\" % it['amount'] # last page? print totals: if pages == page: f['net'] = \"%0.2f\" % (total / Decimal(\"1.21\")) f['vat'] = \"%0.2f\" % (total * (1 - 1 / Decimal(\"1.21\"))) f['total_label'] = 'Total:' else: f['total_label'] = 'SubTotal:' f['total'] = \"%0.2f\" % total response.headers['Content-Type'] = 'application/pdf' return f.render('invoice.pdf', dest='S') Of course, this is a hardcoded example. You can use the database to store invoices or any other data; there is no rigid class hierachy to follow, just fill your template like a dict!","title":"Sample Templating Engine"},{"location":"reference/FPDF.html","text":"FPDF fpdf = FPDF(orientation = 'P', unit = 'mm', format='A4') Description This is the class constructor. It allows setting up the page format, the orientation and the unit of measurement used in all methods (except for font sizes). Parameters orientation: Default page orientation. Possible values are (case insensitive): P or Portrait L or Landscape The default value is P. unit: User unit. Possible values are: pt: point mm: millimeter cm: centimeter in: inch A point equals 1/72 of an inch, that is to say about 0.35 mm (an inch being 2.54 cm). This is a very common unit in typography; font sizes are expressed in this unit. The default value is mm. format: The format used for pages. It can be any one of the following values (case insensitive): A3 A4 A5 Letter Legal or a tuple containing the width and the height (expressed in the given unit). In portrait orientation, the tuple should be in the order ( width , height ), but in landscape orientation, the order should be ( height , width ). In either case, the first tuple element is usually less than the second. The default value is A4. Example Example with a custom 100x150 mm page format: pdf = FPDF('P', 'mm', (100, 150))","title":"FPDF"},{"location":"reference/FPDF.html#fpdf","text":"fpdf = FPDF(orientation = 'P', unit = 'mm', format='A4')","title":"FPDF"},{"location":"reference/FPDF.html#description","text":"This is the class constructor. It allows setting up the page format, the orientation and the unit of measurement used in all methods (except for font sizes).","title":"Description"},{"location":"reference/FPDF.html#parameters","text":"orientation: Default page orientation. Possible values are (case insensitive): P or Portrait L or Landscape The default value is P. unit: User unit. Possible values are: pt: point mm: millimeter cm: centimeter in: inch A point equals 1/72 of an inch, that is to say about 0.35 mm (an inch being 2.54 cm). This is a very common unit in typography; font sizes are expressed in this unit. The default value is mm. format: The format used for pages. It can be any one of the following values (case insensitive): A3 A4 A5 Letter Legal or a tuple containing the width and the height (expressed in the given unit). In portrait orientation, the tuple should be in the order ( width , height ), but in landscape orientation, the order should be ( height , width ). In either case, the first tuple element is usually less than the second. The default value is A4.","title":"Parameters"},{"location":"reference/FPDF.html#example","text":"Example with a custom 100x150 mm page format: pdf = FPDF('P', 'mm', (100, 150))","title":"Example"},{"location":"reference/accept_page_break.html","text":"accept_page_break fpdf.accept_page_break() Description Whenever a page break condition is met, this method is called, and the break is issued or not depending on the returned value. The default implementation returns a value according to the mode selected by set_auto_page_break . This method is called automatically and should not be called directly by the application. See also set_auto_page_break .","title":"accept_page_break"},{"location":"reference/accept_page_break.html#accept_page_break","text":"fpdf.accept_page_break()","title":"accept_page_break"},{"location":"reference/accept_page_break.html#description","text":"Whenever a page break condition is met, this method is called, and the break is issued or not depending on the returned value. The default implementation returns a value according to the mode selected by set_auto_page_break . This method is called automatically and should not be called directly by the application.","title":"Description"},{"location":"reference/accept_page_break.html#see-also","text":"set_auto_page_break .","title":"See also"},{"location":"reference/add_font.html","text":"add_font fpdf.add_font(family: str, style = '', fname = '', uni = False) Description Imports a TrueType, OpenType or Type1 font and makes it available. Warning: for Type1 and legacy fonts it is necessary to generate a font definition file first with the MakeFont utility. This feature is currently deprecated in favour of TrueType Unicode font support (whose fonts are automatically processed with the included ttfonts.py utility). Note : the font source files must be accessible. They are searched successively in (if these constants are defined): FPDF_FONTPATH (by default, the font folder in the fpdf package directory) SYSTEM_TTFONTS (e.g. C:\\WINDOWS\\FONTS ) If the file corresponding to the requested font is not found, the runtime exception \"TTF Font file not found: ...\" is raised. For more information, see the Unicode support page. This method should be called before the set_font method is used, and the font will be available for the whole document. Note : due to the fact that font processing can occupy large amount of time, some data are cached. Cache files are created in same folder by default. This can be changed by setting the FPDF_CACHE_MODE constant: 0 - (by default), store the cache in the same folder as the font file 1 - disable all caching 2 - store cache files in the FPDF_CACHE_DIR directory with cryptic names Parameters family: Font family. Used as a reference for set_font , for example: 'dejavu' . style: Font style. Deprecated, maintained only for backward compatibility. fname: Font file name (e.g. 'DejaVuSansCondensed.ttf' ). You can specify a full path; if not, the file will be searched in FPDF_FONTPATH or SYSTEM_TTFONTS . uni: TTF Unicode flag (if set to True , TrueType font subset embedding will be enabled and text will be treated as utf8 by default). You must not call add_font for the standard PDF Latin-1 fonts (Courier, Helvetica, Times, Symbol, Zapfdingbats); use set_font directly in that case. Calling this method with uni=False is discouraged as legacy font support is complex and deprecated. Example # Add a Unicode free font pdf.add_font('DejaVu', '', 'DejaVuSansCondensed.ttf', uni=True) # Add a Unicode system font (using full path) pdf.add_font('sysfont', '', r\"c:\\WINDOWS\\Fonts\\arial.ttf\", uni=True) See also set_font , set_font_size , cell , multi_cell , write .","title":"add_font"},{"location":"reference/add_font.html#add_font","text":"fpdf.add_font(family: str, style = '', fname = '', uni = False)","title":"add_font"},{"location":"reference/add_font.html#description","text":"Imports a TrueType, OpenType or Type1 font and makes it available. Warning: for Type1 and legacy fonts it is necessary to generate a font definition file first with the MakeFont utility. This feature is currently deprecated in favour of TrueType Unicode font support (whose fonts are automatically processed with the included ttfonts.py utility). Note : the font source files must be accessible. They are searched successively in (if these constants are defined): FPDF_FONTPATH (by default, the font folder in the fpdf package directory) SYSTEM_TTFONTS (e.g. C:\\WINDOWS\\FONTS ) If the file corresponding to the requested font is not found, the runtime exception \"TTF Font file not found: ...\" is raised. For more information, see the Unicode support page. This method should be called before the set_font method is used, and the font will be available for the whole document. Note : due to the fact that font processing can occupy large amount of time, some data are cached. Cache files are created in same folder by default. This can be changed by setting the FPDF_CACHE_MODE constant: 0 - (by default), store the cache in the same folder as the font file 1 - disable all caching 2 - store cache files in the FPDF_CACHE_DIR directory with cryptic names","title":"Description"},{"location":"reference/add_font.html#parameters","text":"family: Font family. Used as a reference for set_font , for example: 'dejavu' . style: Font style. Deprecated, maintained only for backward compatibility. fname: Font file name (e.g. 'DejaVuSansCondensed.ttf' ). You can specify a full path; if not, the file will be searched in FPDF_FONTPATH or SYSTEM_TTFONTS . uni: TTF Unicode flag (if set to True , TrueType font subset embedding will be enabled and text will be treated as utf8 by default). You must not call add_font for the standard PDF Latin-1 fonts (Courier, Helvetica, Times, Symbol, Zapfdingbats); use set_font directly in that case. Calling this method with uni=False is discouraged as legacy font support is complex and deprecated.","title":"Parameters"},{"location":"reference/add_font.html#example","text":"# Add a Unicode free font pdf.add_font('DejaVu', '', 'DejaVuSansCondensed.ttf', uni=True) # Add a Unicode system font (using full path) pdf.add_font('sysfont', '', r\"c:\\WINDOWS\\Fonts\\arial.ttf\", uni=True)","title":"Example"},{"location":"reference/add_font.html#see-also","text":"set_font , set_font_size , cell , multi_cell , write .","title":"See also"},{"location":"reference/add_link.html","text":"add_link fpdf.add_link() Description Creates a new internal link and returns its identifier. An internal link is a clickable area which directs to another place within the document. The identifier can then be passed to cell , write , image or link . The destination is defined with set_link . See also cell , write , image , link , set_link .","title":"add_link"},{"location":"reference/add_link.html#add_link","text":"fpdf.add_link()","title":"add_link"},{"location":"reference/add_link.html#description","text":"Creates a new internal link and returns its identifier. An internal link is a clickable area which directs to another place within the document. The identifier can then be passed to cell , write , image or link . The destination is defined with set_link .","title":"Description"},{"location":"reference/add_link.html#see-also","text":"cell , write , image , link , set_link .","title":"See also"},{"location":"reference/add_page.html","text":"add_page fpdf.add_page(orientation = '', format = '', same = False) Description Adds a new page to the document. If a page is already present, the footer method is called first to output the footer. Then the page is added, the current position set to the top-left corner according to the left and top margins, and header is called to display the header. The font which was set before calling is automatically restored. There is no need to call set_font again if you want to continue with the same font. Colors and the line width are also preserved. The origin of the coordinate system is at the top-left corner and increasing ordinates go downwards. Parameters orientation: Page orientation. Possible values are (case insensitive): P or Portrait L or Landscape The default value is the one passed to the constructor. format: The format used for pages. It can be either one of the following values (case insensitive): A3 A4 A5 Letter Legal or a tuple containing the width and the height (expressed in the given unit). In portrait orientation, the tuple should be in the order ( width , height ), but in landscape orientation, the order should be ( height , width ). In either case, the first tuple element is usually less than the second. The default value is the one passed to the constructor. same: True if page must be same as previous. In this case other parameters are ignored. See also FPDF , header , footer , set_margins .","title":"add_page"},{"location":"reference/add_page.html#add_page","text":"fpdf.add_page(orientation = '', format = '', same = False)","title":"add_page"},{"location":"reference/add_page.html#description","text":"Adds a new page to the document. If a page is already present, the footer method is called first to output the footer. Then the page is added, the current position set to the top-left corner according to the left and top margins, and header is called to display the header. The font which was set before calling is automatically restored. There is no need to call set_font again if you want to continue with the same font. Colors and the line width are also preserved. The origin of the coordinate system is at the top-left corner and increasing ordinates go downwards.","title":"Description"},{"location":"reference/add_page.html#parameters","text":"orientation: Page orientation. Possible values are (case insensitive): P or Portrait L or Landscape The default value is the one passed to the constructor. format: The format used for pages. It can be either one of the following values (case insensitive): A3 A4 A5 Letter Legal or a tuple containing the width and the height (expressed in the given unit). In portrait orientation, the tuple should be in the order ( width , height ), but in landscape orientation, the order should be ( height , width ). In either case, the first tuple element is usually less than the second. The default value is the one passed to the constructor. same: True if page must be same as previous. In this case other parameters are ignored.","title":"Parameters"},{"location":"reference/add_page.html#see-also","text":"FPDF , header , footer , set_margins .","title":"See also"},{"location":"reference/alias_nb_pages.html","text":"alias_nb_pages fpdf.alias_nb_pages() Description Defines an alias for the total number of pages. It will be substituted as the document is closed. Parameters alias: The alias. Default value: {nb}. Example class PDF(FPDF): def footer(self): # Go to 1.5 cm from bottom self.set_y(-15) # Select Arial italic 8 self.set_font('Arial', 'I', 8) # Print current and total page numbers self.cell(0, 10, 'Page %s' % self.page_no() + '/{nb}', 0, 0, 'C') pdf = PDF() pdf.alias_nb_pages() See also page_no , footer .","title":"alias_nb_pages"},{"location":"reference/alias_nb_pages.html#alias_nb_pages","text":"fpdf.alias_nb_pages()","title":"alias_nb_pages"},{"location":"reference/alias_nb_pages.html#description","text":"Defines an alias for the total number of pages. It will be substituted as the document is closed.","title":"Description"},{"location":"reference/alias_nb_pages.html#parameters","text":"alias: The alias. Default value: {nb}.","title":"Parameters"},{"location":"reference/alias_nb_pages.html#example","text":"class PDF(FPDF): def footer(self): # Go to 1.5 cm from bottom self.set_y(-15) # Select Arial italic 8 self.set_font('Arial', 'I', 8) # Print current and total page numbers self.cell(0, 10, 'Page %s' % self.page_no() + '/{nb}', 0, 0, 'C') pdf = PDF() pdf.alias_nb_pages()","title":"Example"},{"location":"reference/alias_nb_pages.html#see-also","text":"page_no , footer .","title":"See also"},{"location":"reference/cell.html","text":"cell fpdf.cell(w, h = 0, txt = '', border = 0, ln = 0, align = '', fill = False, link = '') Description Prints a cell (rectangular area) with optional borders, background color and character string. The upper-left corner of the cell corresponds to the current position. The text can be aligned or centered. After the call, the current position moves to the right or to the next line. It is possible to put a link on the text. If automatic page breaking is enabled and the cell goes beyond the limit, a page break is done before outputting. Parameters w: Cell width. If 0, the cell extends up to the right margin. h: Cell height. Default value: 0. txt: String to print. Default value: empty string. border: Indicates if borders must be drawn around the cell. The value can be either a number: 0: no border 1: frame or a string containing some or all of the following characters (in any order): L : left T : top R : right B : bottom Default value: 0. ln: Indicates where the current position should go after the call. Possible values are: 0: to the right 1: to the beginning of the next line 2: below Putting 1 is equivalent to putting 0 and calling ln just after. Default value: 0. align: Allows to center or align the text. Possible values are: L or empty string: left align (default value) C : center R : right align fill: Indicates if the cell background must be painted ( True ) or transparent ( False ). Default value: False. link: URL or identifier returned by add_link . Example # Set font pdf.set_font('Arial', 'B', 16) # Move to 8 cm to the right pdf.cell(80) # Centered text in a framed 20*10 mm cell and line break pdf.cell(20, 10, 'Title', 1, 1, 'C') See also set_font , set_doc_option , set_draw_color , set_fill_color , set_text_color , set_line_width , add_link , ln , multi_cell , write , set_auto_page_break .","title":"cell"},{"location":"reference/cell.html#cell","text":"fpdf.cell(w, h = 0, txt = '', border = 0, ln = 0, align = '', fill = False, link = '')","title":"cell"},{"location":"reference/cell.html#description","text":"Prints a cell (rectangular area) with optional borders, background color and character string. The upper-left corner of the cell corresponds to the current position. The text can be aligned or centered. After the call, the current position moves to the right or to the next line. It is possible to put a link on the text. If automatic page breaking is enabled and the cell goes beyond the limit, a page break is done before outputting.","title":"Description"},{"location":"reference/cell.html#parameters","text":"w: Cell width. If 0, the cell extends up to the right margin. h: Cell height. Default value: 0. txt: String to print. Default value: empty string. border: Indicates if borders must be drawn around the cell. The value can be either a number: 0: no border 1: frame or a string containing some or all of the following characters (in any order): L : left T : top R : right B : bottom Default value: 0. ln: Indicates where the current position should go after the call. Possible values are: 0: to the right 1: to the beginning of the next line 2: below Putting 1 is equivalent to putting 0 and calling ln just after. Default value: 0. align: Allows to center or align the text. Possible values are: L or empty string: left align (default value) C : center R : right align fill: Indicates if the cell background must be painted ( True ) or transparent ( False ). Default value: False. link: URL or identifier returned by add_link .","title":"Parameters"},{"location":"reference/cell.html#example","text":"# Set font pdf.set_font('Arial', 'B', 16) # Move to 8 cm to the right pdf.cell(80) # Centered text in a framed 20*10 mm cell and line break pdf.cell(20, 10, 'Title', 1, 1, 'C')","title":"Example"},{"location":"reference/cell.html#see-also","text":"set_font , set_doc_option , set_draw_color , set_fill_color , set_text_color , set_line_width , add_link , ln , multi_cell , write , set_auto_page_break .","title":"See also"},{"location":"reference/close.html","text":"close fpdf.close() Description Terminates the PDF document. It is not necessary to call this method explicitly because output does it automatically. If the document contains no page, add_page is called to prevent from getting an invalid document. See also open , output .","title":"close"},{"location":"reference/close.html#close","text":"fpdf.close()","title":"close"},{"location":"reference/close.html#description","text":"Terminates the PDF document. It is not necessary to call this method explicitly because output does it automatically. If the document contains no page, add_page is called to prevent from getting an invalid document.","title":"Description"},{"location":"reference/close.html#see-also","text":"open , output .","title":"See also"},{"location":"reference/code39.html","text":"code39 fpdf.code39(txt: str, x: float, y: float, w=1.5, h=5.0) Description Add a new barcode following C39 schema. Parameters txt: The text to be represented by the barcode. Method accepts characters from following list: '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ-. $/+%' . To be more precise, it's equal to following expression: string.digits + string.ascii_uppercase + '-. $/+%' ,. Take a not, method also accepts '*' , but this character is used to escape barcode text and shouldn't be used to code text. x: Abscissa of upper-left barcode. y: Ordinate of upper-left barcode. w: Width of rectangles the barcode is built on. For example 0 is represented by nnnwwnwnn where 'w' is a rectangle with width equals to w and 'n' is equal to w/3 h: Height of the barcode See also interleaved2of5","title":"code39"},{"location":"reference/code39.html#code39","text":"fpdf.code39(txt: str, x: float, y: float, w=1.5, h=5.0)","title":"code39"},{"location":"reference/code39.html#description","text":"Add a new barcode following C39 schema.","title":"Description"},{"location":"reference/code39.html#parameters","text":"txt: The text to be represented by the barcode. Method accepts characters from following list: '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ-. $/+%' . To be more precise, it's equal to following expression: string.digits + string.ascii_uppercase + '-. $/+%' ,. Take a not, method also accepts '*' , but this character is used to escape barcode text and shouldn't be used to code text. x: Abscissa of upper-left barcode. y: Ordinate of upper-left barcode. w: Width of rectangles the barcode is built on. For example 0 is represented by nnnwwnwnn where 'w' is a rectangle with width equals to w and 'n' is equal to w/3 h: Height of the barcode","title":"Parameters"},{"location":"reference/code39.html#see-also","text":"interleaved2of5","title":"See also"},{"location":"reference/dashed_line.html","text":"dashed_line fpdf.dashed_line(x1, y1, x2, y2, dash_length = 1, space_length = 1) Description Draw a dashed line between two points. Same interface as line except the two parameters dash_length and space_length. Parameters x1: Abscissa of first point y1: Ordinate of first point x2: Abscissa of second point y2: Ordinate of second point dash_length: Length of the dash space_length: Length of the space between dashes Example # Adds a dashed line beginning at point (10,30), # ending at point (110,30) with a # dash length of 1 and a space length of 10. pdf.dashed_line(10, 30, 110, 30, 1, 10) See also line .","title":"dashed_line"},{"location":"reference/dashed_line.html#dashed_line","text":"fpdf.dashed_line(x1, y1, x2, y2, dash_length = 1, space_length = 1)","title":"dashed_line"},{"location":"reference/dashed_line.html#description","text":"Draw a dashed line between two points. Same interface as line except the two parameters dash_length and space_length.","title":"Description"},{"location":"reference/dashed_line.html#parameters","text":"x1: Abscissa of first point y1: Ordinate of first point x2: Abscissa of second point y2: Ordinate of second point dash_length: Length of the dash space_length: Length of the space between dashes","title":"Parameters"},{"location":"reference/dashed_line.html#example","text":"# Adds a dashed line beginning at point (10,30), # ending at point (110,30) with a # dash length of 1 and a space length of 10. pdf.dashed_line(10, 30, 110, 30, 1, 10)","title":"Example"},{"location":"reference/dashed_line.html#see-also","text":"line .","title":"See also"},{"location":"reference/ellipse.html","text":"ellipse fpdf.ellipse(x: float, y: float, w: float, h: float, style = '') Description Outputs an ellipse. It can be drawn (border only), filled (with no border) or both. Unlike the PHP version, this function uses the top-left position and width and height of the ellipse, like rect , not the center point and radius. Parameters x: Abscissa of upper-left bounging box. y: Ordinate of upper-left bounging box. w: Width. h: Height. style: Style of rendering. Possible values are: D or empty string: draw. This is the default value. F : fill DF or FD : draw and fill See also cell , rect .","title":"ellipse"},{"location":"reference/ellipse.html#ellipse","text":"fpdf.ellipse(x: float, y: float, w: float, h: float, style = '')","title":"ellipse"},{"location":"reference/ellipse.html#description","text":"Outputs an ellipse. It can be drawn (border only), filled (with no border) or both. Unlike the PHP version, this function uses the top-left position and width and height of the ellipse, like rect , not the center point and radius.","title":"Description"},{"location":"reference/ellipse.html#parameters","text":"x: Abscissa of upper-left bounging box. y: Ordinate of upper-left bounging box. w: Width. h: Height. style: Style of rendering. Possible values are: D or empty string: draw. This is the default value. F : fill DF or FD : draw and fill","title":"Parameters"},{"location":"reference/ellipse.html#see-also","text":"cell , rect .","title":"See also"},{"location":"reference/error.html","text":"error fpdf.error(msg: str) Description This method is automatically called in case of fatal error; it simply outputs the message and halts the execution. An inherited class may override it to customize the error handling but should always halt the script, or the resulting document would probably be invalid. Parameters msg: The error message.","title":"error"},{"location":"reference/error.html#error","text":"fpdf.error(msg: str)","title":"error"},{"location":"reference/error.html#description","text":"This method is automatically called in case of fatal error; it simply outputs the message and halts the execution. An inherited class may override it to customize the error handling but should always halt the script, or the resulting document would probably be invalid.","title":"Description"},{"location":"reference/error.html#parameters","text":"msg: The error message.","title":"Parameters"},{"location":"reference/footer.html","text":"footer fpdf.footer() Description This method is used to render the page footer. It is automatically called by add_page and close and should not be called directly by the application. The implementation in FPDF is empty, so you have to subclass it and override the method if you want a specific processing. Example class PDF(FPDF): def footer(self): # Go to 1.5 cm from bottom self.set_y(-15) # Select Arial italic 8 self.set_font('Arial', 'I', 8) # Print centered page number self.cell(0, 10, 'Page %s' % self.page_no(), 0, 0, 'C') See also add_page , header .","title":"footer"},{"location":"reference/footer.html#footer","text":"fpdf.footer()","title":"footer"},{"location":"reference/footer.html#description","text":"This method is used to render the page footer. It is automatically called by add_page and close and should not be called directly by the application. The implementation in FPDF is empty, so you have to subclass it and override the method if you want a specific processing.","title":"Description"},{"location":"reference/footer.html#example","text":"class PDF(FPDF): def footer(self): # Go to 1.5 cm from bottom self.set_y(-15) # Select Arial italic 8 self.set_font('Arial', 'I', 8) # Print centered page number self.cell(0, 10, 'Page %s' % self.page_no(), 0, 0, 'C')","title":"Example"},{"location":"reference/footer.html#see-also","text":"add_page , header .","title":"See also"},{"location":"reference/get_string_width.html","text":"get_string_width self.get_string_width(s: str) Description Returns the length of a string in user unit. A font must be selected. The value is calculated with stretching and spacing. Parameters s: The string whose length is to be computed. See also set_stretching .","title":"get_string_width"},{"location":"reference/get_string_width.html#get_string_width","text":"self.get_string_width(s: str)","title":"get_string_width"},{"location":"reference/get_string_width.html#description","text":"Returns the length of a string in user unit. A font must be selected. The value is calculated with stretching and spacing.","title":"Description"},{"location":"reference/get_string_width.html#parameters","text":"s: The string whose length is to be computed.","title":"Parameters"},{"location":"reference/get_string_width.html#see-also","text":"set_stretching .","title":"See also"},{"location":"reference/get_x.html","text":"get_x fpdf.get_x() Description Returns the abscissa of the current position. See also get_y , set_x , set_y , set_xy .","title":"get_x"},{"location":"reference/get_x.html#get_x","text":"fpdf.get_x()","title":"get_x"},{"location":"reference/get_x.html#description","text":"Returns the abscissa of the current position.","title":"Description"},{"location":"reference/get_x.html#see-also","text":"get_y , set_x , set_y , set_xy .","title":"See also"},{"location":"reference/get_y.html","text":"get_y fpdf.get_y() Description Returns the ordinate of the current position. See also get_x , set_x , set_y , set_xy .","title":"get_y"},{"location":"reference/get_y.html#get_y","text":"fpdf.get_y()","title":"get_y"},{"location":"reference/get_y.html#description","text":"Returns the ordinate of the current position.","title":"Description"},{"location":"reference/get_y.html#see-also","text":"get_x , set_x , set_y , set_xy .","title":"See also"},{"location":"reference/header.html","text":"header fdpf.header() Description This method is used to render the page header. It is automatically called by add_page and should not be called directly by the application. The implementation in FPDF is empty, so you have to subclass it and override the method if you want a specific processing. Example class PDF(FPDF): def header(self): # Select Arial bold 15 self.set_font('Arial', 'B', 15) # Move to the right self.cell(80) # Framed title self.cell(30, 10, 'Title', 1, 0, 'C') # Line break self.ln(20) See also add_page , footer .","title":"header"},{"location":"reference/header.html#header","text":"fdpf.header()","title":"header"},{"location":"reference/header.html#description","text":"This method is used to render the page header. It is automatically called by add_page and should not be called directly by the application. The implementation in FPDF is empty, so you have to subclass it and override the method if you want a specific processing.","title":"Description"},{"location":"reference/header.html#example","text":"class PDF(FPDF): def header(self): # Select Arial bold 15 self.set_font('Arial', 'B', 15) # Move to the right self.cell(80) # Framed title self.cell(30, 10, 'Title', 1, 0, 'C') # Line break self.ln(20)","title":"Example"},{"location":"reference/header.html#see-also","text":"add_page , footer .","title":"See also"},{"location":"reference/image.html","text":"image fpdf.image(name, x = None, y = None, w = 0, h = 0, type = '', link = '') Description Puts an image. The size it will take on the page can be specified in different ways: explicit width and height (expressed in user units) one explicit dimension, the other being calculated automatically in order to keep the original proportions no explicit dimension, in which case the image is put at 72 dpi. Supported formats are JPEG, PNG and GIF. For JPEGs, all flavors are allowed: gray scales true colors (24 bits) CMYK (32 bits) For PNGs, these are allowed: gray scales of at most 8 bits (256 levels) indexed colors true colors (24 bits) alpha channel ( version 1.7 and up ) but this is not supported: interlacing For GIFs: in case of an animated GIF, only the first frame is used. If a transparent color is defined, it is taken into account. The format can be specified explicitly or inferred from the file extension. It is possible to put a link on the image. Remark : if an image is used several times, only one copy is embedded in the file. Parameters name: Path or URL of the image. x: Abscissa of the upper-left corner. If not specified or equal to None, the current abscissa is used ( version 1.7.1 and up ). y: Ordinate of the upper-left corner. If not specified or equal to None, the current ordinate is used; moreover, a page break is triggered first if necessary (in case automatic page breaking is enabled) and, after the call, the current ordinate is moved to the bottom of the image ( version 1.7.1 and up ). w: Width of the image in the page. If not specified or equal to zero, it is automatically calculated. h: Height of the image in the page. If not specified or equal to zero, it is automatically calculated. type: Image format. Possible values are (case insensitive): JPG, JPEG, PNG and GIF. If not specified, the type is inferred from the file extension. link: URL or identifier returned by add_link . See also add_link , load_resource .","title":"image"},{"location":"reference/image.html#image","text":"fpdf.image(name, x = None, y = None, w = 0, h = 0, type = '', link = '')","title":"image"},{"location":"reference/image.html#description","text":"Puts an image. The size it will take on the page can be specified in different ways: explicit width and height (expressed in user units) one explicit dimension, the other being calculated automatically in order to keep the original proportions no explicit dimension, in which case the image is put at 72 dpi. Supported formats are JPEG, PNG and GIF. For JPEGs, all flavors are allowed: gray scales true colors (24 bits) CMYK (32 bits) For PNGs, these are allowed: gray scales of at most 8 bits (256 levels) indexed colors true colors (24 bits) alpha channel ( version 1.7 and up ) but this is not supported: interlacing For GIFs: in case of an animated GIF, only the first frame is used. If a transparent color is defined, it is taken into account. The format can be specified explicitly or inferred from the file extension. It is possible to put a link on the image. Remark : if an image is used several times, only one copy is embedded in the file.","title":"Description"},{"location":"reference/image.html#parameters","text":"name: Path or URL of the image. x: Abscissa of the upper-left corner. If not specified or equal to None, the current abscissa is used ( version 1.7.1 and up ). y: Ordinate of the upper-left corner. If not specified or equal to None, the current ordinate is used; moreover, a page break is triggered first if necessary (in case automatic page breaking is enabled) and, after the call, the current ordinate is moved to the bottom of the image ( version 1.7.1 and up ). w: Width of the image in the page. If not specified or equal to zero, it is automatically calculated. h: Height of the image in the page. If not specified or equal to zero, it is automatically calculated. type: Image format. Possible values are (case insensitive): JPG, JPEG, PNG and GIF. If not specified, the type is inferred from the file extension. link: URL or identifier returned by add_link .","title":"Parameters"},{"location":"reference/image.html#see-also","text":"add_link , load_resource .","title":"See also"},{"location":"reference/interleaved2of5.html","text":"interleaved2of5 fpdf.interleaved2of5(txt: str, x: float, y: float, w=1.0, h=10.0) Description Add a new barcode following Interleaved 2 of 5 schema. Parameters txt: The text to be represented by the barcode. Method accepts string containing only digits. Take a note, 'A' and 'Z' are also accepted (do not couse an error), but they lead to generate incorrect barcodes as those characters are used to escape barcode. x: Abscissa of upper-left barcode. y: Ordinate of upper-left barcode. w: Width of rectangles the barcode is built on. For example 0 is represented by nnwwn where 'w' is a rectangle with width equals to w and 'n' is equal to w/3 h: Height of the barcode See also code39","title":"interleaved2of5"},{"location":"reference/interleaved2of5.html#interleaved2of5","text":"fpdf.interleaved2of5(txt: str, x: float, y: float, w=1.0, h=10.0)","title":"interleaved2of5"},{"location":"reference/interleaved2of5.html#description","text":"Add a new barcode following Interleaved 2 of 5 schema.","title":"Description"},{"location":"reference/interleaved2of5.html#parameters","text":"txt: The text to be represented by the barcode. Method accepts string containing only digits. Take a note, 'A' and 'Z' are also accepted (do not couse an error), but they lead to generate incorrect barcodes as those characters are used to escape barcode. x: Abscissa of upper-left barcode. y: Ordinate of upper-left barcode. w: Width of rectangles the barcode is built on. For example 0 is represented by nnwwn where 'w' is a rectangle with width equals to w and 'n' is equal to w/3 h: Height of the barcode","title":"Parameters"},{"location":"reference/interleaved2of5.html#see-also","text":"code39","title":"See also"},{"location":"reference/line.html","text":"line fpdf.line(x1, y1, x2, y2) Description Draw a line between two points. Parameters x1: Abscissa of first point y1: Ordinate of first point x2: Abscissa of second point y2: Ordinate of second point Example # Adds a line beginning at point (10,30) and ending at point (110,30) pdf.line(10, 30, 110, 30) See also dashed_line .","title":"line"},{"location":"reference/line.html#line","text":"fpdf.line(x1, y1, x2, y2)","title":"line"},{"location":"reference/line.html#description","text":"Draw a line between two points.","title":"Description"},{"location":"reference/line.html#parameters","text":"x1: Abscissa of first point y1: Ordinate of first point x2: Abscissa of second point y2: Ordinate of second point","title":"Parameters"},{"location":"reference/line.html#example","text":"# Adds a line beginning at point (10,30) and ending at point (110,30) pdf.line(10, 30, 110, 30)","title":"Example"},{"location":"reference/line.html#see-also","text":"dashed_line .","title":"See also"},{"location":"reference/link.html","text":"link fpdf.link(x: float, y: float, w: float, h: float, link, alt_text = '') Description Puts a link on a rectangular area of the page. Text or image links are generally put via cell , write or image , but this method can be useful for instance to define a clickable area inside an image. Parameters x: Abscissa of the upper-left corner of the rectangle. y: Ordinate of the upper-left corner of the rectangle. w: Width of the rectangle. h: Height of the rectangle. link: URL or identifier returned by add_link . alt_text: An optional string defining the link alternative text Contents See also add_link , cell , write , image .","title":"link"},{"location":"reference/link.html#link","text":"fpdf.link(x: float, y: float, w: float, h: float, link, alt_text = '')","title":"link"},{"location":"reference/link.html#description","text":"Puts a link on a rectangular area of the page. Text or image links are generally put via cell , write or image , but this method can be useful for instance to define a clickable area inside an image.","title":"Description"},{"location":"reference/link.html#parameters","text":"x: Abscissa of the upper-left corner of the rectangle. y: Ordinate of the upper-left corner of the rectangle. w: Width of the rectangle. h: Height of the rectangle. link: URL or identifier returned by add_link . alt_text: An optional string defining the link alternative text Contents","title":"Parameters"},{"location":"reference/link.html#see-also","text":"add_link , cell , write , image .","title":"See also"},{"location":"reference/ln.html","text":"ln fpdf.ln(h = '') Description Performs a line break. The current abscissa goes back to the left margin and the ordinate increases by the amount passed in the parameter. Parameters h: The height of the break. By default, the value equals the height of the last printed cell. See also cell .","title":"ln"},{"location":"reference/ln.html#ln","text":"fpdf.ln(h = '')","title":"ln"},{"location":"reference/ln.html#description","text":"Performs a line break. The current abscissa goes back to the left margin and the ordinate increases by the amount passed in the parameter.","title":"Description"},{"location":"reference/ln.html#parameters","text":"h: The height of the break. By default, the value equals the height of the last printed cell.","title":"Parameters"},{"location":"reference/ln.html#see-also","text":"cell .","title":"See also"},{"location":"reference/load_resource.html","text":"load_resource fpdf.load_resource(reason: string, filename: string) Description This method is used to load external resources, such as images. It is automatically called when resource added to document by image . The implementation in library sre try to load resource from local file system or from network if filename starts with http:// or https:// . This method can be overrided within subclass if you want a specific processing. Returns file-like object. Parameters reason: Resource type: image . filename: filename or URL. See also image .","title":"load_resource"},{"location":"reference/load_resource.html#load_resource","text":"fpdf.load_resource(reason: string, filename: string)","title":"load_resource"},{"location":"reference/load_resource.html#description","text":"This method is used to load external resources, such as images. It is automatically called when resource added to document by image . The implementation in library sre try to load resource from local file system or from network if filename starts with http:// or https:// . This method can be overrided within subclass if you want a specific processing. Returns file-like object.","title":"Description"},{"location":"reference/load_resource.html#parameters","text":"reason: Resource type: image . filename: filename or URL.","title":"Parameters"},{"location":"reference/load_resource.html#see-also","text":"image .","title":"See also"},{"location":"reference/multi_cell.html","text":"multi_cell fpdf.multi_cell(w: float, h: float, txt: str, border = 0, align: str = 'J', fill: bool = False) Description This method allows printing text with line breaks. They can be automatic (as soon as the text reaches the right border of the cell) or explicit (via the \\n character). As many cells as necessary are output, one below the other. Text can be aligned, centered or justified. The cell block can be framed and the background painted. Parameters w: Width of cells. If 0, they extend up to the right margin of the page. h: Height of cells. txt: String to print. border: Indicates if borders must be drawn around the cell block. The value can be either a number: 0: no border 1: frame or a string containing some or all of the following characters (in any order): L : left T : top R : right B : bottom Default value: 0. align: Sets the text alignment. Possible values are: L : left alignment C : center R : right alignment J : justification (default value) fill Indicates if the cell background must be painted ( True ) or transparent ( False ). Default value: False. See also set_doc_option , set_font , set_draw_color , set_fill_color , set_text_color , set_line_width , cell , write , set_auto_page_break .","title":"multi_cell"},{"location":"reference/multi_cell.html#multi_cell","text":"fpdf.multi_cell(w: float, h: float, txt: str, border = 0, align: str = 'J', fill: bool = False)","title":"multi_cell"},{"location":"reference/multi_cell.html#description","text":"This method allows printing text with line breaks. They can be automatic (as soon as the text reaches the right border of the cell) or explicit (via the \\n character). As many cells as necessary are output, one below the other. Text can be aligned, centered or justified. The cell block can be framed and the background painted.","title":"Description"},{"location":"reference/multi_cell.html#parameters","text":"w: Width of cells. If 0, they extend up to the right margin of the page. h: Height of cells. txt: String to print. border: Indicates if borders must be drawn around the cell block. The value can be either a number: 0: no border 1: frame or a string containing some or all of the following characters (in any order): L : left T : top R : right B : bottom Default value: 0. align: Sets the text alignment. Possible values are: L : left alignment C : center R : right alignment J : justification (default value) fill Indicates if the cell background must be painted ( True ) or transparent ( False ). Default value: False.","title":"Parameters"},{"location":"reference/multi_cell.html#see-also","text":"set_doc_option , set_font , set_draw_color , set_fill_color , set_text_color , set_line_width , cell , write , set_auto_page_break .","title":"See also"},{"location":"reference/open.html","text":"open fpdf.open() Description This method begins the generation of the PDF document. It is not necessary to call it explicitly because add_page does it automatically. Note: no page is created by this method. See also add_page , close .","title":"open"},{"location":"reference/open.html#open","text":"fpdf.open()","title":"open"},{"location":"reference/open.html#description","text":"This method begins the generation of the PDF document. It is not necessary to call it explicitly because add_page does it automatically. Note: no page is created by this method.","title":"Description"},{"location":"reference/open.html#see-also","text":"add_page , close .","title":"See also"},{"location":"reference/output.html","text":"output fpdf.output(name = '', dest = '') Description Send the document to some destination: standard output, a file or a byte string. The method first calls close if necessary to terminate the document. NOTICE: In Python 2 strings were raw data but in Python 3 strings are now unicode by default. If you are using Python 3.x you have to use pdf.output(dest='S').encode('latin-1') in order to get the output, if you don't do so the generated PDF will be invalid and depending on the viewer either not open at all or show up as some blank pages. Parameters name: The name of the file. Only used when writing to a file. dest: Destination to send the document. It can take one of the following values: I or D : write the document to sys.stdout . This is the default if no file name is given. F : save to a local file with the given name (may include a path). This is the default if a file name is given. S : return the document as a byte string. See also close .","title":"output"},{"location":"reference/output.html#output","text":"fpdf.output(name = '', dest = '')","title":"output"},{"location":"reference/output.html#description","text":"Send the document to some destination: standard output, a file or a byte string. The method first calls close if necessary to terminate the document. NOTICE: In Python 2 strings were raw data but in Python 3 strings are now unicode by default. If you are using Python 3.x you have to use pdf.output(dest='S').encode('latin-1') in order to get the output, if you don't do so the generated PDF will be invalid and depending on the viewer either not open at all or show up as some blank pages.","title":"Description"},{"location":"reference/output.html#parameters","text":"name: The name of the file. Only used when writing to a file. dest: Destination to send the document. It can take one of the following values: I or D : write the document to sys.stdout . This is the default if no file name is given. F : save to a local file with the given name (may include a path). This is the default if a file name is given. S : return the document as a byte string.","title":"Parameters"},{"location":"reference/output.html#see-also","text":"close .","title":"See also"},{"location":"reference/page_no.html","text":"page_no fpdf.page_no() Description Returns the current page number. See also alias_nb_pages .","title":"page_no"},{"location":"reference/page_no.html#page_no","text":"fpdf.page_no()","title":"page_no"},{"location":"reference/page_no.html#description","text":"Returns the current page number.","title":"Description"},{"location":"reference/page_no.html#see-also","text":"alias_nb_pages .","title":"See also"},{"location":"reference/rect.html","text":"rect fpdf.rect(x: float, y: float, w: float, h: float, style = '') Description Outputs a rectangle. It can be drawn (border only), filled (with no border) or both. Parameters x: Abscissa of upper-left corner. y: Ordinate of upper-left corner. w: Width. h: Height. style: Style of rendering. Possible values are: D or empty string: draw. This is the default value. F : fill DF or FD : draw and fill See also cell , ellipse .","title":"rect"},{"location":"reference/rect.html#rect","text":"fpdf.rect(x: float, y: float, w: float, h: float, style = '')","title":"rect"},{"location":"reference/rect.html#description","text":"Outputs a rectangle. It can be drawn (border only), filled (with no border) or both.","title":"Description"},{"location":"reference/rect.html#parameters","text":"x: Abscissa of upper-left corner. y: Ordinate of upper-left corner. w: Width. h: Height. style: Style of rendering. Possible values are: D or empty string: draw. This is the default value. F : fill DF or FD : draw and fill","title":"Parameters"},{"location":"reference/rect.html#see-also","text":"cell , ellipse .","title":"See also"},{"location":"reference/set_author.html","text":"set_author fpdf.set_author(author: str) Description Defines the author of the document. Parameters author: The name of the author. See also set_creator , set_keywords , set_subject , set_title .","title":"set_author"},{"location":"reference/set_author.html#set_author","text":"fpdf.set_author(author: str)","title":"set_author"},{"location":"reference/set_author.html#description","text":"Defines the author of the document.","title":"Description"},{"location":"reference/set_author.html#parameters","text":"author: The name of the author.","title":"Parameters"},{"location":"reference/set_author.html#see-also","text":"set_creator , set_keywords , set_subject , set_title .","title":"See also"},{"location":"reference/set_auto_page_break.html","text":"set_auto_page_break fpdf.set_auto_page_break(auto: bool, margin = 0.0) Description Enables or disables the automatic page breaking mode. When enabling, the second parameter is the distance from the bottom of the page that defines the triggering limit. By default, the mode is on and the margin is 2 cm. Parameters auto: Boolean indicating if mode should be on or off. margin: Distance from the bottom of the page. See also cell , multi_cell , accept_page_break .","title":"set_auto_page_break"},{"location":"reference/set_auto_page_break.html#set_auto_page_break","text":"fpdf.set_auto_page_break(auto: bool, margin = 0.0)","title":"set_auto_page_break"},{"location":"reference/set_auto_page_break.html#description","text":"Enables or disables the automatic page breaking mode. When enabling, the second parameter is the distance from the bottom of the page that defines the triggering limit. By default, the mode is on and the margin is 2 cm.","title":"Description"},{"location":"reference/set_auto_page_break.html#parameters","text":"auto: Boolean indicating if mode should be on or off. margin: Distance from the bottom of the page.","title":"Parameters"},{"location":"reference/set_auto_page_break.html#see-also","text":"cell , multi_cell , accept_page_break .","title":"See also"},{"location":"reference/set_compression.html","text":"set_compression fpdf.set_compression(compress: bool) Description Activates or deactivates page compression. When activated, the internal representation of each page is compressed, which leads to a compression ratio of about 2 for the resulting document. Compression is on by default. Parameters compress: Boolean indicating if compression must be enabled.","title":"set_compression"},{"location":"reference/set_compression.html#set_compression","text":"fpdf.set_compression(compress: bool)","title":"set_compression"},{"location":"reference/set_compression.html#description","text":"Activates or deactivates page compression. When activated, the internal representation of each page is compressed, which leads to a compression ratio of about 2 for the resulting document. Compression is on by default.","title":"Description"},{"location":"reference/set_compression.html#parameters","text":"compress: Boolean indicating if compression must be enabled.","title":"Parameters"},{"location":"reference/set_creator.html","text":"set_creator fpdf.set_creator(creator: str) Description Defines the creator of the document. This is typically the name of the application that generates the PDF. Parameters creator: The name of the creator. See also set_author , set_keywords , set_subject , set_title .","title":"set_creator"},{"location":"reference/set_creator.html#set_creator","text":"fpdf.set_creator(creator: str)","title":"set_creator"},{"location":"reference/set_creator.html#description","text":"Defines the creator of the document. This is typically the name of the application that generates the PDF.","title":"Description"},{"location":"reference/set_creator.html#parameters","text":"creator: The name of the creator.","title":"Parameters"},{"location":"reference/set_creator.html#see-also","text":"set_author , set_keywords , set_subject , set_title .","title":"See also"},{"location":"reference/set_display_mode.html","text":"set_display_mode fpdf.set_display_mode(zoom, layout: str) Description Defines the way the document is to be displayed by the viewer. The zoom level can be set: pages can be displayed entirely on screen, occupy the full width of the window, use the real size, be scaled by a specific zooming factor or use the viewer default (configured in the Preferences menu of Adobe Reader). The page layout can be specified too: single page at a time, continuous display, two columns or viewer default. If this method is not called, the zoom mode is set to fullwidth and the layout is set to continuous by default. Parameters zoom: The zoom to use. It can be one of the following string values: fullpage : displays the entire page on the screen fullwidth : uses the maximum width of the window real : uses the real size (equivalent to 100% zoom) default : uses the viewer default mode or a number indicating the zooming factor to use, as a percentage. layout: The page layout. Possible values are: single : displays one page at a time continuous : displays pages continuously two : displays two pages in two columns default : uses the viewer default mode The default value is continuous .","title":"set_display_mode"},{"location":"reference/set_display_mode.html#set_display_mode","text":"fpdf.set_display_mode(zoom, layout: str)","title":"set_display_mode"},{"location":"reference/set_display_mode.html#description","text":"Defines the way the document is to be displayed by the viewer. The zoom level can be set: pages can be displayed entirely on screen, occupy the full width of the window, use the real size, be scaled by a specific zooming factor or use the viewer default (configured in the Preferences menu of Adobe Reader). The page layout can be specified too: single page at a time, continuous display, two columns or viewer default. If this method is not called, the zoom mode is set to fullwidth and the layout is set to continuous by default.","title":"Description"},{"location":"reference/set_display_mode.html#parameters","text":"zoom: The zoom to use. It can be one of the following string values: fullpage : displays the entire page on the screen fullwidth : uses the maximum width of the window real : uses the real size (equivalent to 100% zoom) default : uses the viewer default mode or a number indicating the zooming factor to use, as a percentage. layout: The page layout. Possible values are: single : displays one page at a time continuous : displays pages continuously two : displays two pages in two columns default : uses the viewer default mode The default value is continuous .","title":"Parameters"},{"location":"reference/set_doc_option.html","text":"set_doc_option fpdf.set_doc_option(opt: str, value) set_doc_option Description Parameters Options core_fonts_encoding See also Description Defines the document option. Parameters opt: Option to set. value: Value. Options core_fonts_encoding Specify encoding used for decoding unicode text for standard (non-unicode) fonts. Supported values are latin-1 and windows-1252 . Set this option before using any text writing. See also set_font , write .","title":"set_doc_option"},{"location":"reference/set_doc_option.html#set_doc_option","text":"fpdf.set_doc_option(opt: str, value) set_doc_option Description Parameters Options core_fonts_encoding See also","title":"set_doc_option"},{"location":"reference/set_doc_option.html#description","text":"Defines the document option.","title":"Description"},{"location":"reference/set_doc_option.html#parameters","text":"opt: Option to set. value: Value.","title":"Parameters"},{"location":"reference/set_doc_option.html#options","text":"","title":"Options"},{"location":"reference/set_doc_option.html#core_fonts_encoding","text":"Specify encoding used for decoding unicode text for standard (non-unicode) fonts. Supported values are latin-1 and windows-1252 . Set this option before using any text writing.","title":"core_fonts_encoding"},{"location":"reference/set_doc_option.html#see-also","text":"set_font , write .","title":"See also"},{"location":"reference/set_draw_color.html","text":"set_draw_color fpdf.set_draw_color(r: int, g: int = -1, b: int = -1) Description Defines the color used for all drawing operations (lines, rectangles and cell borders). It can be expressed in RGB components or gray scale. The method can be called before the first page is created and the value is retained from page to page. Parameters r: If g and b are given, this indicates the red component; if not, this indicates the gray level. The value is between 0 and 255. g: Green component (between 0 and 255). b: Blue component (between 0 and 255). See also set_fill_color , set_text_color , line , rect , cell , multi_cell .","title":"set_draw_color"},{"location":"reference/set_draw_color.html#set_draw_color","text":"fpdf.set_draw_color(r: int, g: int = -1, b: int = -1)","title":"set_draw_color"},{"location":"reference/set_draw_color.html#description","text":"Defines the color used for all drawing operations (lines, rectangles and cell borders). It can be expressed in RGB components or gray scale. The method can be called before the first page is created and the value is retained from page to page.","title":"Description"},{"location":"reference/set_draw_color.html#parameters","text":"r: If g and b are given, this indicates the red component; if not, this indicates the gray level. The value is between 0 and 255. g: Green component (between 0 and 255). b: Blue component (between 0 and 255).","title":"Parameters"},{"location":"reference/set_draw_color.html#see-also","text":"set_fill_color , set_text_color , line , rect , cell , multi_cell .","title":"See also"},{"location":"reference/set_fill_color.html","text":"set_fill_color fpdf.set_fill_color(r: int, g: int = -1, b: int = -1) Description Defines the color used for all filling operations (filled rectangles and cell backgrounds). It can be expressed in RGB components or gray scale. The method can be called before the first page is created and the value is retained from page to page. Parameters r: If g and b are given, this indicates the red component; if not, this indicates the gray level. The value is between 0 and 255. g: Green component (between 0 and 255). b: Blue component (between 0 and 255). See also set_draw_color , set_text_color , rect , cell , multi_cell .","title":"set_fill_color"},{"location":"reference/set_fill_color.html#set_fill_color","text":"fpdf.set_fill_color(r: int, g: int = -1, b: int = -1)","title":"set_fill_color"},{"location":"reference/set_fill_color.html#description","text":"Defines the color used for all filling operations (filled rectangles and cell backgrounds). It can be expressed in RGB components or gray scale. The method can be called before the first page is created and the value is retained from page to page.","title":"Description"},{"location":"reference/set_fill_color.html#parameters","text":"r: If g and b are given, this indicates the red component; if not, this indicates the gray level. The value is between 0 and 255. g: Green component (between 0 and 255). b: Blue component (between 0 and 255).","title":"Parameters"},{"location":"reference/set_fill_color.html#see-also","text":"set_draw_color , set_text_color , rect , cell , multi_cell .","title":"See also"},{"location":"reference/set_font.html","text":"set_font fpdf.set_font(family, style = '', size = 0) Description Sets the font used to print character strings. It is mandatory to call this method at least once before printing text or the resulting document would not be valid. The font can be either a standard one or a font added via the add_font method. Default encoding is not specified, but all text writing methods accept only unicode for external fonts and one byte encoding for standard. Standard fonts use Latin-1 encoding by default, but Windows encoding cp1252 (Western Europe) can be used with set_doc_option (\"core_fonts_encoding\", encoding). The method can be called before the first page is created and the font is retained from page to page. If you just wish to change the current font size, it is simpler to call set_font_size . Note : the font metric files must be accessible. They are searched successively in: The directory defined by the FPDF_FONTPATH constant (if this constant is defined) The font directory located in the directory containing fpdf.py (if it exists) The directories accessible through include() Example defining FPDF_FONTPATH (note the mandatory trailing slash): define(\"FPDF_FONTPATH\",\"/home/www/font/\"); require(\"fpdf.php\"); If the file corresponding to the requested font is not found, the error \"Could not include font metric file\" is issued. Parameters family: Font family. It can be either a name defined by add_font or one of the standard families (case insensitive): Courier (fixed-width) Helvetica or Arial (synonymous; sans serif) Times (serif) Symbol (symbolic) ZapfDingbats (symbolic) It is also possible to pass an empty string. In that case, the current family is retained. style: Font style. Possible values are (case insensitive): empty string: regular B: bold I: italic U: underline or any combination. The default value is regular. Bold and italic styles do not apply to Symbol and ZapfDingbats. size: Font size in points. The default value is the current size. If no size has been specified since the beginning of the document, the value taken is 12. Example # Times regular 12 pdf.set_font('Times') # Arial bold 14 pdf.set_font('Arial', 'B', 14) # Removes bold pdf.set_font('') # Times bold, italic and underlined 14 pdf.set_font('Times', 'BIU') See also add_font , set_doc_option , set_font_size , cell , multi_cell , write , set_stretching .","title":"set_font"},{"location":"reference/set_font.html#set_font","text":"fpdf.set_font(family, style = '', size = 0)","title":"set_font"},{"location":"reference/set_font.html#description","text":"Sets the font used to print character strings. It is mandatory to call this method at least once before printing text or the resulting document would not be valid. The font can be either a standard one or a font added via the add_font method. Default encoding is not specified, but all text writing methods accept only unicode for external fonts and one byte encoding for standard. Standard fonts use Latin-1 encoding by default, but Windows encoding cp1252 (Western Europe) can be used with set_doc_option (\"core_fonts_encoding\", encoding). The method can be called before the first page is created and the font is retained from page to page. If you just wish to change the current font size, it is simpler to call set_font_size . Note : the font metric files must be accessible. They are searched successively in: The directory defined by the FPDF_FONTPATH constant (if this constant is defined) The font directory located in the directory containing fpdf.py (if it exists) The directories accessible through include() Example defining FPDF_FONTPATH (note the mandatory trailing slash): define(\"FPDF_FONTPATH\",\"/home/www/font/\"); require(\"fpdf.php\"); If the file corresponding to the requested font is not found, the error \"Could not include font metric file\" is issued.","title":"Description"},{"location":"reference/set_font.html#parameters","text":"family: Font family. It can be either a name defined by add_font or one of the standard families (case insensitive): Courier (fixed-width) Helvetica or Arial (synonymous; sans serif) Times (serif) Symbol (symbolic) ZapfDingbats (symbolic) It is also possible to pass an empty string. In that case, the current family is retained. style: Font style. Possible values are (case insensitive): empty string: regular B: bold I: italic U: underline or any combination. The default value is regular. Bold and italic styles do not apply to Symbol and ZapfDingbats. size: Font size in points. The default value is the current size. If no size has been specified since the beginning of the document, the value taken is 12.","title":"Parameters"},{"location":"reference/set_font.html#example","text":"# Times regular 12 pdf.set_font('Times') # Arial bold 14 pdf.set_font('Arial', 'B', 14) # Removes bold pdf.set_font('') # Times bold, italic and underlined 14 pdf.set_font('Times', 'BIU')","title":"Example"},{"location":"reference/set_font.html#see-also","text":"add_font , set_doc_option , set_font_size , cell , multi_cell , write , set_stretching .","title":"See also"},{"location":"reference/set_font_size.html","text":"set_font_size fpdf.set_font_size(float size) Description Defines the size of the current font. Parameters size: The size (in points). See also set_font .","title":"set_font_size"},{"location":"reference/set_font_size.html#set_font_size","text":"fpdf.set_font_size(float size)","title":"set_font_size"},{"location":"reference/set_font_size.html#description","text":"Defines the size of the current font.","title":"Description"},{"location":"reference/set_font_size.html#parameters","text":"size: The size (in points).","title":"Parameters"},{"location":"reference/set_font_size.html#see-also","text":"set_font .","title":"See also"},{"location":"reference/set_keywords.html","text":"set_keywords fpdf.set_keywords(keywords: str) Description Associates keywords with the document, generally in the form 'keyword1 keyword2 ...'. Parameters keywords: The list of keywords. See also set_author , set_creator , set_subject , set_title .","title":"set_keywords"},{"location":"reference/set_keywords.html#set_keywords","text":"fpdf.set_keywords(keywords: str)","title":"set_keywords"},{"location":"reference/set_keywords.html#description","text":"Associates keywords with the document, generally in the form 'keyword1 keyword2 ...'.","title":"Description"},{"location":"reference/set_keywords.html#parameters","text":"keywords: The list of keywords.","title":"Parameters"},{"location":"reference/set_keywords.html#see-also","text":"set_author , set_creator , set_subject , set_title .","title":"See also"},{"location":"reference/set_left_margin.html","text":"set_left_margin fpdf.set_left_margin(margin: float) Description Defines the left margin. The method can be called before creating the first page. If the current abscissa goes out of the page, it is brought back to the margin. Parameters margin: The margin. See also set_top_margin , set_right_margin , set_auto_page_break , set_margins .","title":"set_left_margin"},{"location":"reference/set_left_margin.html#set_left_margin","text":"fpdf.set_left_margin(margin: float)","title":"set_left_margin"},{"location":"reference/set_left_margin.html#description","text":"Defines the left margin. The method can be called before creating the first page. If the current abscissa goes out of the page, it is brought back to the margin.","title":"Description"},{"location":"reference/set_left_margin.html#parameters","text":"margin: The margin.","title":"Parameters"},{"location":"reference/set_left_margin.html#see-also","text":"set_top_margin , set_right_margin , set_auto_page_break , set_margins .","title":"See also"},{"location":"reference/set_line_width.html","text":"set_line_width fpdf.set_line_width(width: float) Description Defines the line width. By default, the value equals 0.2 mm. The method can be called before the first page is created and the value is retained from page to page. Parameters width: The width. See also line , rect , cell , multi_cell .","title":"set_line_width"},{"location":"reference/set_line_width.html#set_line_width","text":"fpdf.set_line_width(width: float)","title":"set_line_width"},{"location":"reference/set_line_width.html#description","text":"Defines the line width. By default, the value equals 0.2 mm. The method can be called before the first page is created and the value is retained from page to page.","title":"Description"},{"location":"reference/set_line_width.html#parameters","text":"width: The width.","title":"Parameters"},{"location":"reference/set_line_width.html#see-also","text":"line , rect , cell , multi_cell .","title":"See also"},{"location":"reference/set_link.html","text":"set_link fpdf.set_link(link, y = 0.0, page = -1) Description Defines the page and position a link points to. Parameters link: The link identifier returned by add_link . y: Ordinate of target position; -1 indicates the current position. The default value is 0 (top of page). page: Number of target page; -1 indicates the current page, which is the default value. See also add_link .","title":"set_link"},{"location":"reference/set_link.html#set_link","text":"fpdf.set_link(link, y = 0.0, page = -1)","title":"set_link"},{"location":"reference/set_link.html#description","text":"Defines the page and position a link points to.","title":"Description"},{"location":"reference/set_link.html#parameters","text":"link: The link identifier returned by add_link . y: Ordinate of target position; -1 indicates the current position. The default value is 0 (top of page). page: Number of target page; -1 indicates the current page, which is the default value.","title":"Parameters"},{"location":"reference/set_link.html#see-also","text":"add_link .","title":"See also"},{"location":"reference/set_margins.html","text":"set_margins fpdf.set_margins(left: float, top: float, right: float = -1) Description Defines the left, top and right margins. By default, they equal 1 cm. Call this method to change them. Parameters left: Left margin. top: Top margin. right: Right margin. Default value is the left one. See also set_top_margin , set_left_margin , set_right_margin , set_auto_page_break .","title":"set_margins"},{"location":"reference/set_margins.html#set_margins","text":"fpdf.set_margins(left: float, top: float, right: float = -1)","title":"set_margins"},{"location":"reference/set_margins.html#description","text":"Defines the left, top and right margins. By default, they equal 1 cm. Call this method to change them.","title":"Description"},{"location":"reference/set_margins.html#parameters","text":"left: Left margin. top: Top margin. right: Right margin. Default value is the left one.","title":"Parameters"},{"location":"reference/set_margins.html#see-also","text":"set_top_margin , set_left_margin , set_right_margin , set_auto_page_break .","title":"See also"},{"location":"reference/set_right_margin.html","text":"set_right_margin fpdf.set_right_margin(margin: float) Description Defines the right margin. The method can be called before creating the first page. Parameters margin: The margin. See also set_top_margin , set_left_margin , set_auto_page_break , set_margins .","title":"set_right_margin"},{"location":"reference/set_right_margin.html#set_right_margin","text":"fpdf.set_right_margin(margin: float)","title":"set_right_margin"},{"location":"reference/set_right_margin.html#description","text":"Defines the right margin. The method can be called before creating the first page.","title":"Description"},{"location":"reference/set_right_margin.html#parameters","text":"margin: The margin.","title":"Parameters"},{"location":"reference/set_right_margin.html#see-also","text":"set_top_margin , set_left_margin , set_auto_page_break , set_margins .","title":"See also"},{"location":"reference/set_stretching.html","text":"set_stretching fpdf.set_stretching(stretching: float) Description Sets horizontal font stretching. By default, if this method is not called, no stretching is set (equivalent to a value of 100). Version Since 1.7.3 Parameters stretching: Define horizontal stretching (scaling) in percents. Example # Arial regular 14 pdf.set_font('Arial') # Set stretching to 50%, narrow text pdf.set_stretching(50.0) See also set_font , set_font_size , get_string_width .","title":"set_stretching"},{"location":"reference/set_stretching.html#set_stretching","text":"fpdf.set_stretching(stretching: float)","title":"set_stretching"},{"location":"reference/set_stretching.html#description","text":"Sets horizontal font stretching. By default, if this method is not called, no stretching is set (equivalent to a value of 100).","title":"Description"},{"location":"reference/set_stretching.html#version","text":"Since 1.7.3","title":"Version"},{"location":"reference/set_stretching.html#parameters","text":"stretching: Define horizontal stretching (scaling) in percents.","title":"Parameters"},{"location":"reference/set_stretching.html#example","text":"# Arial regular 14 pdf.set_font('Arial') # Set stretching to 50%, narrow text pdf.set_stretching(50.0)","title":"Example"},{"location":"reference/set_stretching.html#see-also","text":"set_font , set_font_size , get_string_width .","title":"See also"},{"location":"reference/set_subject.html","text":"set_subject fpdf.set_subject(subject: str) Description Defines the subject of the document. Parameters subject: The subject. See also set_author , set_creator , set_keywords , set_title .","title":"set_subject"},{"location":"reference/set_subject.html#set_subject","text":"fpdf.set_subject(subject: str)","title":"set_subject"},{"location":"reference/set_subject.html#description","text":"Defines the subject of the document.","title":"Description"},{"location":"reference/set_subject.html#parameters","text":"subject: The subject.","title":"Parameters"},{"location":"reference/set_subject.html#see-also","text":"set_author , set_creator , set_keywords , set_title .","title":"See also"},{"location":"reference/set_text_color.html","text":"set_text_color fpdf.set_text_color(r: int, g: int = -1, b: int = -1) Description Defines the color used for text. It can be expressed in RGB components or gray scale. The method can be called before the first page is created and the value is retained from page to page. Parameters r: If g and b are given, this indicates the red component; if not, this indicates the gray level. The value is between 0 and 255. g: Green component (between 0 and 255). b: Blue component (between 0 and 255). See also set_draw_color , set_fill_color , text , cell , multi_cell .","title":"set_text_color"},{"location":"reference/set_text_color.html#set_text_color","text":"fpdf.set_text_color(r: int, g: int = -1, b: int = -1)","title":"set_text_color"},{"location":"reference/set_text_color.html#description","text":"Defines the color used for text. It can be expressed in RGB components or gray scale. The method can be called before the first page is created and the value is retained from page to page.","title":"Description"},{"location":"reference/set_text_color.html#parameters","text":"r: If g and b are given, this indicates the red component; if not, this indicates the gray level. The value is between 0 and 255. g: Green component (between 0 and 255). b: Blue component (between 0 and 255).","title":"Parameters"},{"location":"reference/set_text_color.html#see-also","text":"set_draw_color , set_fill_color , text , cell , multi_cell .","title":"See also"},{"location":"reference/set_title.html","text":"set_title fpdf.set_title(title: str) Description Defines the title of the document. Parameters title: The title. See also set_author , set_creator , set_keywords , set_subject .","title":"set_title"},{"location":"reference/set_title.html#set_title","text":"fpdf.set_title(title: str)","title":"set_title"},{"location":"reference/set_title.html#description","text":"Defines the title of the document.","title":"Description"},{"location":"reference/set_title.html#parameters","text":"title: The title.","title":"Parameters"},{"location":"reference/set_title.html#see-also","text":"set_author , set_creator , set_keywords , set_subject .","title":"See also"},{"location":"reference/set_top_margin.html","text":"set_top_margin fpdf.set_top_margin(margin: float) Description Defines the top margin. The method can be called before creating the first page. Parameters margin: The margin. See also set_left_margin , set_right_margin , set_auto_page_break , set_margins .","title":"set_top_margin"},{"location":"reference/set_top_margin.html#set_top_margin","text":"fpdf.set_top_margin(margin: float)","title":"set_top_margin"},{"location":"reference/set_top_margin.html#description","text":"Defines the top margin. The method can be called before creating the first page.","title":"Description"},{"location":"reference/set_top_margin.html#parameters","text":"margin: The margin.","title":"Parameters"},{"location":"reference/set_top_margin.html#see-also","text":"set_left_margin , set_right_margin , set_auto_page_break , set_margins .","title":"See also"},{"location":"reference/set_x.html","text":"set_x fpdf.set_x(x: float) Description Defines the abscissa of the current position. If the passed value is negative, it is relative to the right of the page. Parameters x: The value of the abscissa. See also get_x , get_y , set_y , set_xy .","title":"set_x"},{"location":"reference/set_x.html#set_x","text":"fpdf.set_x(x: float)","title":"set_x"},{"location":"reference/set_x.html#description","text":"Defines the abscissa of the current position. If the passed value is negative, it is relative to the right of the page.","title":"Description"},{"location":"reference/set_x.html#parameters","text":"x: The value of the abscissa.","title":"Parameters"},{"location":"reference/set_x.html#see-also","text":"get_x , get_y , set_y , set_xy .","title":"See also"},{"location":"reference/set_xy.html","text":"set_xy fpdf.set_xy(x: float, y: float) Description Defines the abscissa and ordinate of the current position. If the passed values are negative, they are relative respectively to the right and bottom of the page. Parameters x: The value of the abscissa. y: The value of the ordinate. See also get_x , get_y , set_x , set_y .","title":"set_xy"},{"location":"reference/set_xy.html#set_xy","text":"fpdf.set_xy(x: float, y: float)","title":"set_xy"},{"location":"reference/set_xy.html#description","text":"Defines the abscissa and ordinate of the current position. If the passed values are negative, they are relative respectively to the right and bottom of the page.","title":"Description"},{"location":"reference/set_xy.html#parameters","text":"x: The value of the abscissa. y: The value of the ordinate.","title":"Parameters"},{"location":"reference/set_xy.html#see-also","text":"get_x , get_y , set_x , set_y .","title":"See also"},{"location":"reference/set_y.html","text":"set_y fpdf.set_y(y: float) Description Moves the current abscissa back to the left margin and sets the ordinate. If the passed value is negative, it is relative to the bottom of the page. Parameters y: The value of the ordinate. See also get_x , get_y , set_x , set_xy .","title":"set_y"},{"location":"reference/set_y.html#set_y","text":"fpdf.set_y(y: float)","title":"set_y"},{"location":"reference/set_y.html#description","text":"Moves the current abscissa back to the left margin and sets the ordinate. If the passed value is negative, it is relative to the bottom of the page.","title":"Description"},{"location":"reference/set_y.html#parameters","text":"y: The value of the ordinate.","title":"Parameters"},{"location":"reference/set_y.html#see-also","text":"get_x , get_y , set_x , set_xy .","title":"See also"},{"location":"reference/text.html","text":"text fpdf.text(x: float, y: float, txt: str) Description Prints a character string. The origin is on the left of the first character, on the baseline. This method allows placing a string precisely on the page, but it is usually easier to use cell , multi_cell or write , which are the standard methods to print text. Parameters x: Abscissa of the origin. y: Ordinate of the origin. txt: String to print. See also set_doc_option , set_font , set_text_color , cell , multi_cell , write .","title":"text"},{"location":"reference/text.html#text","text":"fpdf.text(x: float, y: float, txt: str)","title":"text"},{"location":"reference/text.html#description","text":"Prints a character string. The origin is on the left of the first character, on the baseline. This method allows placing a string precisely on the page, but it is usually easier to use cell , multi_cell or write , which are the standard methods to print text.","title":"Description"},{"location":"reference/text.html#parameters","text":"x: Abscissa of the origin. y: Ordinate of the origin. txt: String to print.","title":"Parameters"},{"location":"reference/text.html#see-also","text":"set_doc_option , set_font , set_text_color , cell , multi_cell , write .","title":"See also"},{"location":"reference/write.html","text":"write write(h: float, txt: str, link) Description This method prints text from the current position. When the right margin is reached (or the \\n character is met), a line break occurs and text continues from the left margin. Upon method exit, the current position is left just at the end of the text. It is possible to put a link on the text. Parameters h: Line height. txt: String to print. link: URL or identifier returned by add_link . Example # Begin with regular font pdf.set_font('Arial', '', 14) pdf.write(5, 'Visit ') # Then put a blue underlined link pdf.set_text_color(0, 0, 255) pdf.set_font('', 'U') pdf.write(5, 'www.fpdf.org', 'http://www.fpdf.org') See also set_doc_option , set_font , set_text_color , add_link , multi_cell , set_auto_page_break , write_html","title":"write"},{"location":"reference/write.html#write","text":"write(h: float, txt: str, link)","title":"write"},{"location":"reference/write.html#description","text":"This method prints text from the current position. When the right margin is reached (or the \\n character is met), a line break occurs and text continues from the left margin. Upon method exit, the current position is left just at the end of the text. It is possible to put a link on the text.","title":"Description"},{"location":"reference/write.html#parameters","text":"h: Line height. txt: String to print. link: URL or identifier returned by add_link .","title":"Parameters"},{"location":"reference/write.html#example","text":"# Begin with regular font pdf.set_font('Arial', '', 14) pdf.write(5, 'Visit ') # Then put a blue underlined link pdf.set_text_color(0, 0, 255) pdf.set_font('', 'U') pdf.write(5, 'www.fpdf.org', 'http://www.fpdf.org')","title":"Example"},{"location":"reference/write.html#see-also","text":"set_doc_option , set_font , set_text_color , add_link , multi_cell , set_auto_page_break , write_html","title":"See also"},{"location":"reference/write_html.html","text":"write_html HTMLMixin.write_html(text: str, image_map = None) Description PyFPDF supports basic HTML, mainly intended to write reports from web frameworks. It understands a limited subset of the HTML language, and it doesn't support advanced features nor CSS (look below). HTMLMixin could be used along with FPDF class to implement this functionality (see the example). Sample: html.pdf Parameters test: string with HTML markup image_map: dictionary with image map Details HTML tags and attributes supported: H1 to H8: headings (align attribute) P: paragraphs (align attributes) B, I, U: bold, italic, underline FONT: (face, size, color attributes) CENTER for aligning A: links (href attribute) IMG: images (src, width, height attributes) OL, UL, LI: ordered, unordered and list items (can be nested) TABLE: (border, width attributes) THEAD: header (opens each page) TFOOT: footer (closes each page) TBODY: actual rows TR: rows (bgcolor attribute) TH: highlight cells (align, bgcolor, width attributes) TD: rows (align, bgcolor, width attributes) Note: Tables should have at least a first TH row with a width attribute. Example html = \"\"\" <H1 align=\"center\">html2fpdf</H1> <h2>Basic usage</h2> <p>You can now easily print text mixing different styles : <B>bold</B>, <I>italic</I>, <U>underlined</U>, or <B><I><U>all at once</U></I></B>!<BR>You can also insert links on text, such as <A HREF=\"http://www.fpdf.org\">www.fpdf.org</A>, or on an image: click on the logo.<br> <center> <A HREF=\"http://www.fpdf.org\"><img src=\"tutorial/logo.png\" width=\"104\" height=\"71\"></A> </center> <h3>Sample List</h3> <ul><li>option 1</li> <ol><li>option 2</li></ol> <li>option 3</li></ul> <table border=\"0\" align=\"center\" width=\"50%\"> <thead><tr><th width=\"30%\">Header 1</th><th width=\"70%\">header 2</th></tr></thead> <tbody> <tr><td>cell 1</td><td>cell 2</td></tr> <tr><td>cell 2</td><td>cell 3</td></tr> </tbody> </table> \"\"\" from pyfpdf import FPDF, HTMLMixin class MyFPDF(FPDF, HTMLMixin): pass pdf = MyFPDF() #First page pdf.add_page() pdf.write_html(html) pdf.output('html.pdf', 'F') See html.py or [Web2Py] (../Web2Py.md) for a complete example. # TODO fix links See also write , add_font , image .","title":"write_html"},{"location":"reference/write_html.html#write_html","text":"HTMLMixin.write_html(text: str, image_map = None)","title":"write_html"},{"location":"reference/write_html.html#description","text":"PyFPDF supports basic HTML, mainly intended to write reports from web frameworks. It understands a limited subset of the HTML language, and it doesn't support advanced features nor CSS (look below). HTMLMixin could be used along with FPDF class to implement this functionality (see the example). Sample: html.pdf","title":"Description"},{"location":"reference/write_html.html#parameters","text":"test: string with HTML markup image_map: dictionary with image map","title":"Parameters"},{"location":"reference/write_html.html#details","text":"HTML tags and attributes supported: H1 to H8: headings (align attribute) P: paragraphs (align attributes) B, I, U: bold, italic, underline FONT: (face, size, color attributes) CENTER for aligning A: links (href attribute) IMG: images (src, width, height attributes) OL, UL, LI: ordered, unordered and list items (can be nested) TABLE: (border, width attributes) THEAD: header (opens each page) TFOOT: footer (closes each page) TBODY: actual rows TR: rows (bgcolor attribute) TH: highlight cells (align, bgcolor, width attributes) TD: rows (align, bgcolor, width attributes) Note: Tables should have at least a first TH row with a width attribute.","title":"Details"},{"location":"reference/write_html.html#example","text":"html = \"\"\" <H1 align=\"center\">html2fpdf</H1> <h2>Basic usage</h2> <p>You can now easily print text mixing different styles : <B>bold</B>, <I>italic</I>, <U>underlined</U>, or <B><I><U>all at once</U></I></B>!<BR>You can also insert links on text, such as <A HREF=\"http://www.fpdf.org\">www.fpdf.org</A>, or on an image: click on the logo.<br> <center> <A HREF=\"http://www.fpdf.org\"><img src=\"tutorial/logo.png\" width=\"104\" height=\"71\"></A> </center> <h3>Sample List</h3> <ul><li>option 1</li> <ol><li>option 2</li></ol> <li>option 3</li></ul> <table border=\"0\" align=\"center\" width=\"50%\"> <thead><tr><th width=\"30%\">Header 1</th><th width=\"70%\">header 2</th></tr></thead> <tbody> <tr><td>cell 1</td><td>cell 2</td></tr> <tr><td>cell 2</td><td>cell 3</td></tr> </tbody> </table> \"\"\" from pyfpdf import FPDF, HTMLMixin class MyFPDF(FPDF, HTMLMixin): pass pdf = MyFPDF() #First page pdf.add_page() pdf.write_html(html) pdf.output('html.pdf', 'F') See html.py or [Web2Py] (../Web2Py.md) for a complete example. # TODO fix links","title":"Example"},{"location":"reference/write_html.html#see-also","text":"write , add_font , image .","title":"See also"}]}